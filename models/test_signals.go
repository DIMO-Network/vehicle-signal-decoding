// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TestSignal is an object representing the database table.
type TestSignal struct {
	ID                 string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceDefinitionID string    `boil:"device_definition_id" json:"device_definition_id" toml:"device_definition_id" yaml:"device_definition_id"`
	DBCCodesID         string    `boil:"dbc_codes_id" json:"dbc_codes_id" toml:"dbc_codes_id" yaml:"dbc_codes_id"`
	UserDeviceID       string    `boil:"user_device_id" json:"user_device_id" toml:"user_device_id" yaml:"user_device_id"`
	AutopiUnitID       string    `boil:"autopi_unit_id" json:"autopi_unit_id" toml:"autopi_unit_id" yaml:"autopi_unit_id"`
	Value              string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	Approved           bool      `boil:"approved" json:"approved" toml:"approved" yaml:"approved"`
	VehicleTimestamp   time.Time `boil:"vehicle_timestamp" json:"vehicle_timestamp" toml:"vehicle_timestamp" yaml:"vehicle_timestamp"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Signals            null.JSON `boil:"signals" json:"signals,omitempty" toml:"signals" yaml:"signals,omitempty"`

	R *testSignalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L testSignalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TestSignalColumns = struct {
	ID                 string
	DeviceDefinitionID string
	DBCCodesID         string
	UserDeviceID       string
	AutopiUnitID       string
	Value              string
	Approved           string
	VehicleTimestamp   string
	CreatedAt          string
	UpdatedAt          string
	Signals            string
}{
	ID:                 "id",
	DeviceDefinitionID: "device_definition_id",
	DBCCodesID:         "dbc_codes_id",
	UserDeviceID:       "user_device_id",
	AutopiUnitID:       "autopi_unit_id",
	Value:              "value",
	Approved:           "approved",
	VehicleTimestamp:   "vehicle_timestamp",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	Signals:            "signals",
}

var TestSignalTableColumns = struct {
	ID                 string
	DeviceDefinitionID string
	DBCCodesID         string
	UserDeviceID       string
	AutopiUnitID       string
	Value              string
	Approved           string
	VehicleTimestamp   string
	CreatedAt          string
	UpdatedAt          string
	Signals            string
}{
	ID:                 "test_signals.id",
	DeviceDefinitionID: "test_signals.device_definition_id",
	DBCCodesID:         "test_signals.dbc_codes_id",
	UserDeviceID:       "test_signals.user_device_id",
	AutopiUnitID:       "test_signals.autopi_unit_id",
	Value:              "test_signals.value",
	Approved:           "test_signals.approved",
	VehicleTimestamp:   "test_signals.vehicle_timestamp",
	CreatedAt:          "test_signals.created_at",
	UpdatedAt:          "test_signals.updated_at",
	Signals:            "test_signals.signals",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TestSignalWhere = struct {
	ID                 whereHelperstring
	DeviceDefinitionID whereHelperstring
	DBCCodesID         whereHelperstring
	UserDeviceID       whereHelperstring
	AutopiUnitID       whereHelperstring
	Value              whereHelperstring
	Approved           whereHelperbool
	VehicleTimestamp   whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	Signals            whereHelpernull_JSON
}{
	ID:                 whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"id\""},
	DeviceDefinitionID: whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"device_definition_id\""},
	DBCCodesID:         whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"dbc_codes_id\""},
	UserDeviceID:       whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"user_device_id\""},
	AutopiUnitID:       whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"autopi_unit_id\""},
	Value:              whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"value\""},
	Approved:           whereHelperbool{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"approved\""},
	VehicleTimestamp:   whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"vehicle_timestamp\""},
	CreatedAt:          whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"updated_at\""},
	Signals:            whereHelpernull_JSON{field: "\"vehicle_signal_decoding_api\".\"test_signals\".\"signals\""},
}

// TestSignalRels is where relationship names are stored.
var TestSignalRels = struct {
	DBCCode string
}{
	DBCCode: "DBCCode",
}

// testSignalR is where relationships are stored.
type testSignalR struct {
	DBCCode *DBCCode `boil:"DBCCode" json:"DBCCode" toml:"DBCCode" yaml:"DBCCode"`
}

// NewStruct creates a new relationship struct
func (*testSignalR) NewStruct() *testSignalR {
	return &testSignalR{}
}

func (r *testSignalR) GetDBCCode() *DBCCode {
	if r == nil {
		return nil
	}
	return r.DBCCode
}

// testSignalL is where Load methods for each relationship are stored.
type testSignalL struct{}

var (
	testSignalAllColumns            = []string{"id", "device_definition_id", "dbc_codes_id", "user_device_id", "autopi_unit_id", "value", "approved", "vehicle_timestamp", "created_at", "updated_at", "signals"}
	testSignalColumnsWithoutDefault = []string{"id", "device_definition_id", "dbc_codes_id", "user_device_id", "autopi_unit_id", "value", "approved", "vehicle_timestamp"}
	testSignalColumnsWithDefault    = []string{"created_at", "updated_at", "signals"}
	testSignalPrimaryKeyColumns     = []string{"id"}
	testSignalGeneratedColumns      = []string{}
)

type (
	// TestSignalSlice is an alias for a slice of pointers to TestSignal.
	// This should almost always be used instead of []TestSignal.
	TestSignalSlice []*TestSignal
	// TestSignalHook is the signature for custom TestSignal hook methods
	TestSignalHook func(context.Context, boil.ContextExecutor, *TestSignal) error

	testSignalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	testSignalType                 = reflect.TypeOf(&TestSignal{})
	testSignalMapping              = queries.MakeStructMapping(testSignalType)
	testSignalPrimaryKeyMapping, _ = queries.BindMapping(testSignalType, testSignalMapping, testSignalPrimaryKeyColumns)
	testSignalInsertCacheMut       sync.RWMutex
	testSignalInsertCache          = make(map[string]insertCache)
	testSignalUpdateCacheMut       sync.RWMutex
	testSignalUpdateCache          = make(map[string]updateCache)
	testSignalUpsertCacheMut       sync.RWMutex
	testSignalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var testSignalAfterSelectHooks []TestSignalHook

var testSignalBeforeInsertHooks []TestSignalHook
var testSignalAfterInsertHooks []TestSignalHook

var testSignalBeforeUpdateHooks []TestSignalHook
var testSignalAfterUpdateHooks []TestSignalHook

var testSignalBeforeDeleteHooks []TestSignalHook
var testSignalAfterDeleteHooks []TestSignalHook

var testSignalBeforeUpsertHooks []TestSignalHook
var testSignalAfterUpsertHooks []TestSignalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TestSignal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TestSignal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TestSignal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TestSignal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TestSignal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TestSignal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TestSignal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TestSignal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TestSignal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testSignalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTestSignalHook registers your hook function for all future operations.
func AddTestSignalHook(hookPoint boil.HookPoint, testSignalHook TestSignalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		testSignalAfterSelectHooks = append(testSignalAfterSelectHooks, testSignalHook)
	case boil.BeforeInsertHook:
		testSignalBeforeInsertHooks = append(testSignalBeforeInsertHooks, testSignalHook)
	case boil.AfterInsertHook:
		testSignalAfterInsertHooks = append(testSignalAfterInsertHooks, testSignalHook)
	case boil.BeforeUpdateHook:
		testSignalBeforeUpdateHooks = append(testSignalBeforeUpdateHooks, testSignalHook)
	case boil.AfterUpdateHook:
		testSignalAfterUpdateHooks = append(testSignalAfterUpdateHooks, testSignalHook)
	case boil.BeforeDeleteHook:
		testSignalBeforeDeleteHooks = append(testSignalBeforeDeleteHooks, testSignalHook)
	case boil.AfterDeleteHook:
		testSignalAfterDeleteHooks = append(testSignalAfterDeleteHooks, testSignalHook)
	case boil.BeforeUpsertHook:
		testSignalBeforeUpsertHooks = append(testSignalBeforeUpsertHooks, testSignalHook)
	case boil.AfterUpsertHook:
		testSignalAfterUpsertHooks = append(testSignalAfterUpsertHooks, testSignalHook)
	}
}

// One returns a single testSignal record from the query.
func (q testSignalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TestSignal, error) {
	o := &TestSignal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for test_signals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TestSignal records from the query.
func (q testSignalQuery) All(ctx context.Context, exec boil.ContextExecutor) (TestSignalSlice, error) {
	var o []*TestSignal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TestSignal slice")
	}

	if len(testSignalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TestSignal records in the query.
func (q testSignalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count test_signals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q testSignalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if test_signals exists")
	}

	return count > 0, nil
}

// DBCCode pointed to by the foreign key.
func (o *TestSignal) DBCCode(mods ...qm.QueryMod) dbcCodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DBCCodesID),
	}

	queryMods = append(queryMods, mods...)

	return DBCCodes(queryMods...)
}

// LoadDBCCode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (testSignalL) LoadDBCCode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestSignal interface{}, mods queries.Applicator) error {
	var slice []*TestSignal
	var object *TestSignal

	if singular {
		var ok bool
		object, ok = maybeTestSignal.(*TestSignal)
		if !ok {
			object = new(TestSignal)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTestSignal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTestSignal))
			}
		}
	} else {
		s, ok := maybeTestSignal.(*[]*TestSignal)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTestSignal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTestSignal))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testSignalR{}
		}
		args = append(args, object.DBCCodesID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testSignalR{}
			}

			for _, a := range args {
				if a == obj.DBCCodesID {
					continue Outer
				}
			}

			args = append(args, obj.DBCCodesID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.dbc_codes`),
		qm.WhereIn(`vehicle_signal_decoding_api.dbc_codes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DBCCode")
	}

	var resultSlice []*DBCCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DBCCode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dbc_codes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dbc_codes")
	}

	if len(dbcCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DBCCode = foreign
		if foreign.R == nil {
			foreign.R = &dbcCodeR{}
		}
		foreign.R.TestSignals = append(foreign.R.TestSignals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DBCCodesID == foreign.ID {
				local.R.DBCCode = foreign
				if foreign.R == nil {
					foreign.R = &dbcCodeR{}
				}
				foreign.R.TestSignals = append(foreign.R.TestSignals, local)
				break
			}
		}
	}

	return nil
}

// SetDBCCode of the testSignal to the related item.
// Sets o.R.DBCCode to related.
// Adds o to related.R.TestSignals.
func (o *TestSignal) SetDBCCode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DBCCode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"test_signals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dbc_codes_id"}),
		strmangle.WhereClause("\"", "\"", 2, testSignalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DBCCodesID = related.ID
	if o.R == nil {
		o.R = &testSignalR{
			DBCCode: related,
		}
	} else {
		o.R.DBCCode = related
	}

	if related.R == nil {
		related.R = &dbcCodeR{
			TestSignals: TestSignalSlice{o},
		}
	} else {
		related.R.TestSignals = append(related.R.TestSignals, o)
	}

	return nil
}

// TestSignals retrieves all the records using an executor.
func TestSignals(mods ...qm.QueryMod) testSignalQuery {
	mods = append(mods, qm.From("\"vehicle_signal_decoding_api\".\"test_signals\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_signal_decoding_api\".\"test_signals\".*"})
	}

	return testSignalQuery{q}
}

// FindTestSignal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTestSignal(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TestSignal, error) {
	testSignalObj := &TestSignal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_signal_decoding_api\".\"test_signals\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, testSignalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from test_signals")
	}

	if err = testSignalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return testSignalObj, err
	}

	return testSignalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TestSignal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no test_signals provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testSignalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	testSignalInsertCacheMut.RLock()
	cache, cached := testSignalInsertCache[key]
	testSignalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			testSignalAllColumns,
			testSignalColumnsWithDefault,
			testSignalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(testSignalType, testSignalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(testSignalType, testSignalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_signal_decoding_api\".\"test_signals\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_signal_decoding_api\".\"test_signals\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into test_signals")
	}

	if !cached {
		testSignalInsertCacheMut.Lock()
		testSignalInsertCache[key] = cache
		testSignalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TestSignal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TestSignal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	testSignalUpdateCacheMut.RLock()
	cache, cached := testSignalUpdateCache[key]
	testSignalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			testSignalAllColumns,
			testSignalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update test_signals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"test_signals\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, testSignalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(testSignalType, testSignalMapping, append(wl, testSignalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update test_signals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for test_signals")
	}

	if !cached {
		testSignalUpdateCacheMut.Lock()
		testSignalUpdateCache[key] = cache
		testSignalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q testSignalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for test_signals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for test_signals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TestSignalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testSignalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"test_signals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, testSignalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in testSignal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all testSignal")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TestSignal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no test_signals provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testSignalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	testSignalUpsertCacheMut.RLock()
	cache, cached := testSignalUpsertCache[key]
	testSignalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			testSignalAllColumns,
			testSignalColumnsWithDefault,
			testSignalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			testSignalAllColumns,
			testSignalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert test_signals, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(testSignalPrimaryKeyColumns))
			copy(conflict, testSignalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_signal_decoding_api\".\"test_signals\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(testSignalType, testSignalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(testSignalType, testSignalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert test_signals")
	}

	if !cached {
		testSignalUpsertCacheMut.Lock()
		testSignalUpsertCache[key] = cache
		testSignalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TestSignal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TestSignal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TestSignal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), testSignalPrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"test_signals\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from test_signals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for test_signals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q testSignalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no testSignalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from test_signals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for test_signals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TestSignalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(testSignalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testSignalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"test_signals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testSignalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from testSignal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for test_signals")
	}

	if len(testSignalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TestSignal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTestSignal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TestSignalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TestSignalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testSignalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_signal_decoding_api\".\"test_signals\".* FROM \"vehicle_signal_decoding_api\".\"test_signals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testSignalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TestSignalSlice")
	}

	*o = slice

	return nil
}

// TestSignalExists checks if the TestSignal row exists.
func TestSignalExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_signal_decoding_api\".\"test_signals\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if test_signals exists")
	}

	return exists, nil
}

// Exists checks if the TestSignal row exists.
func (o *TestSignal) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TestSignalExists(ctx, exec, o.ID)
}
