// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: pkg/grpc/template_config.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemplateConfigService_CreateTemplate_FullMethodName    = "/grpc.TemplateConfigService/CreateTemplate"
	TemplateConfigService_UpdateTemplate_FullMethodName    = "/grpc.TemplateConfigService/UpdateTemplate"
	TemplateConfigService_GetTemplateList_FullMethodName   = "/grpc.TemplateConfigService/GetTemplateList"
	TemplateConfigService_GetTemplateByName_FullMethodName = "/grpc.TemplateConfigService/GetTemplateByName"
)

// TemplateConfigServiceClient is the client API for TemplateConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateConfigServiceClient interface {
	CreateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTemplateList(ctx context.Context, in *GetTemplateListRequest, opts ...grpc.CallOption) (*GetTemplateListResponse, error)
	GetTemplateByName(ctx context.Context, in *GetTemplateByNameRequest, opts ...grpc.CallOption) (*GetTemplateByNameResponse, error)
}

type templateConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateConfigServiceClient(cc grpc.ClientConnInterface) TemplateConfigServiceClient {
	return &templateConfigServiceClient{cc}
}

func (c *templateConfigServiceClient) CreateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TemplateConfigService_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateConfigServiceClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TemplateConfigService_UpdateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateConfigServiceClient) GetTemplateList(ctx context.Context, in *GetTemplateListRequest, opts ...grpc.CallOption) (*GetTemplateListResponse, error) {
	out := new(GetTemplateListResponse)
	err := c.cc.Invoke(ctx, TemplateConfigService_GetTemplateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateConfigServiceClient) GetTemplateByName(ctx context.Context, in *GetTemplateByNameRequest, opts ...grpc.CallOption) (*GetTemplateByNameResponse, error) {
	out := new(GetTemplateByNameResponse)
	err := c.cc.Invoke(ctx, TemplateConfigService_GetTemplateByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateConfigServiceServer is the server API for TemplateConfigService service.
// All implementations must embed UnimplementedTemplateConfigServiceServer
// for forward compatibility
type TemplateConfigServiceServer interface {
	CreateTemplate(context.Context, *UpdateTemplateRequest) (*emptypb.Empty, error)
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*emptypb.Empty, error)
	GetTemplateList(context.Context, *GetTemplateListRequest) (*GetTemplateListResponse, error)
	GetTemplateByName(context.Context, *GetTemplateByNameRequest) (*GetTemplateByNameResponse, error)
	mustEmbedUnimplementedTemplateConfigServiceServer()
}

// UnimplementedTemplateConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateConfigServiceServer struct {
}

func (UnimplementedTemplateConfigServiceServer) CreateTemplate(context.Context, *UpdateTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedTemplateConfigServiceServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedTemplateConfigServiceServer) GetTemplateList(context.Context, *GetTemplateListRequest) (*GetTemplateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateList not implemented")
}
func (UnimplementedTemplateConfigServiceServer) GetTemplateByName(context.Context, *GetTemplateByNameRequest) (*GetTemplateByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateByName not implemented")
}
func (UnimplementedTemplateConfigServiceServer) mustEmbedUnimplementedTemplateConfigServiceServer() {}

// UnsafeTemplateConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateConfigServiceServer will
// result in compilation errors.
type UnsafeTemplateConfigServiceServer interface {
	mustEmbedUnimplementedTemplateConfigServiceServer()
}

func RegisterTemplateConfigServiceServer(s grpc.ServiceRegistrar, srv TemplateConfigServiceServer) {
	s.RegisterService(&TemplateConfigService_ServiceDesc, srv)
}

func _TemplateConfigService_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateConfigServiceServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateConfigService_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateConfigServiceServer).CreateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateConfigService_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateConfigServiceServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateConfigService_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateConfigServiceServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateConfigService_GetTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateConfigServiceServer).GetTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateConfigService_GetTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateConfigServiceServer).GetTemplateList(ctx, req.(*GetTemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateConfigService_GetTemplateByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateConfigServiceServer).GetTemplateByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateConfigService_GetTemplateByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateConfigServiceServer).GetTemplateByName(ctx, req.(*GetTemplateByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateConfigService_ServiceDesc is the grpc.ServiceDesc for TemplateConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TemplateConfigService",
	HandlerType: (*TemplateConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemplate",
			Handler:    _TemplateConfigService_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _TemplateConfigService_UpdateTemplate_Handler,
		},
		{
			MethodName: "GetTemplateList",
			Handler:    _TemplateConfigService_GetTemplateList_Handler,
		},
		{
			MethodName: "GetTemplateByName",
			Handler:    _TemplateConfigService_GetTemplateByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/template_config.proto",
}
