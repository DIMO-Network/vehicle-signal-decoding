// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: pkg/grpc/template_device_definition.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemplateDeviceDefinitionServiceClient is the client API for TemplateDeviceDefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateDeviceDefinitionServiceClient interface {
	CreateTemplateDeviceDefinition(ctx context.Context, in *TemplateDeviceDefinition, opts ...grpc.CallOption) (*CreateTemplateDeviceDefinitionResponse, error)
	UpdateTemplateDeviceDefinition(ctx context.Context, in *TemplateDeviceDefinition, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTemplateDeviceDefinition(ctx context.Context, in *GetTemplateDeviceDefinitionByIdRequest, opts ...grpc.CallOption) (*TemplateDeviceDefinition, error)
	GetTemplateDeviceDefinitions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTemplateDeviceDefinitionResponse, error)
	DeleteTemplateDeviceDefinition(ctx context.Context, in *DeleteTemplateDeviceDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type templateDeviceDefinitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateDeviceDefinitionServiceClient(cc grpc.ClientConnInterface) TemplateDeviceDefinitionServiceClient {
	return &templateDeviceDefinitionServiceClient{cc}
}

func (c *templateDeviceDefinitionServiceClient) CreateTemplateDeviceDefinition(ctx context.Context, in *TemplateDeviceDefinition, opts ...grpc.CallOption) (*CreateTemplateDeviceDefinitionResponse, error) {
	out := new(CreateTemplateDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, "/grpc.TemplateDeviceDefinitionService/CreateTemplateDeviceDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDeviceDefinitionServiceClient) UpdateTemplateDeviceDefinition(ctx context.Context, in *TemplateDeviceDefinition, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.TemplateDeviceDefinitionService/UpdateTemplateDeviceDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDeviceDefinitionServiceClient) GetTemplateDeviceDefinition(ctx context.Context, in *GetTemplateDeviceDefinitionByIdRequest, opts ...grpc.CallOption) (*TemplateDeviceDefinition, error) {
	out := new(TemplateDeviceDefinition)
	err := c.cc.Invoke(ctx, "/grpc.TemplateDeviceDefinitionService/GetTemplateDeviceDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDeviceDefinitionServiceClient) GetTemplateDeviceDefinitions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTemplateDeviceDefinitionResponse, error) {
	out := new(GetTemplateDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, "/grpc.TemplateDeviceDefinitionService/GetTemplateDeviceDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDeviceDefinitionServiceClient) DeleteTemplateDeviceDefinition(ctx context.Context, in *DeleteTemplateDeviceDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.TemplateDeviceDefinitionService/DeleteTemplateDeviceDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateDeviceDefinitionServiceServer is the server API for TemplateDeviceDefinitionService service.
// All implementations must embed UnimplementedTemplateDeviceDefinitionServiceServer
// for forward compatibility
type TemplateDeviceDefinitionServiceServer interface {
	CreateTemplateDeviceDefinition(context.Context, *TemplateDeviceDefinition) (*CreateTemplateDeviceDefinitionResponse, error)
	UpdateTemplateDeviceDefinition(context.Context, *TemplateDeviceDefinition) (*emptypb.Empty, error)
	GetTemplateDeviceDefinition(context.Context, *GetTemplateDeviceDefinitionByIdRequest) (*TemplateDeviceDefinition, error)
	GetTemplateDeviceDefinitions(context.Context, *emptypb.Empty) (*GetTemplateDeviceDefinitionResponse, error)
	DeleteTemplateDeviceDefinition(context.Context, *DeleteTemplateDeviceDefinitionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTemplateDeviceDefinitionServiceServer()
}

// UnimplementedTemplateDeviceDefinitionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateDeviceDefinitionServiceServer struct {
}

func (UnimplementedTemplateDeviceDefinitionServiceServer) CreateTemplateDeviceDefinition(context.Context, *TemplateDeviceDefinition) (*CreateTemplateDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateDeviceDefinition not implemented")
}
func (UnimplementedTemplateDeviceDefinitionServiceServer) UpdateTemplateDeviceDefinition(context.Context, *TemplateDeviceDefinition) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateDeviceDefinition not implemented")
}
func (UnimplementedTemplateDeviceDefinitionServiceServer) GetTemplateDeviceDefinition(context.Context, *GetTemplateDeviceDefinitionByIdRequest) (*TemplateDeviceDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateDeviceDefinition not implemented")
}
func (UnimplementedTemplateDeviceDefinitionServiceServer) GetTemplateDeviceDefinitions(context.Context, *emptypb.Empty) (*GetTemplateDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateDeviceDefinitions not implemented")
}
func (UnimplementedTemplateDeviceDefinitionServiceServer) DeleteTemplateDeviceDefinition(context.Context, *DeleteTemplateDeviceDefinitionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateDeviceDefinition not implemented")
}
func (UnimplementedTemplateDeviceDefinitionServiceServer) mustEmbedUnimplementedTemplateDeviceDefinitionServiceServer() {
}

// UnsafeTemplateDeviceDefinitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateDeviceDefinitionServiceServer will
// result in compilation errors.
type UnsafeTemplateDeviceDefinitionServiceServer interface {
	mustEmbedUnimplementedTemplateDeviceDefinitionServiceServer()
}

func RegisterTemplateDeviceDefinitionServiceServer(s grpc.ServiceRegistrar, srv TemplateDeviceDefinitionServiceServer) {
	s.RegisterService(&TemplateDeviceDefinitionService_ServiceDesc, srv)
}

func _TemplateDeviceDefinitionService_CreateTemplateDeviceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateDeviceDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDeviceDefinitionServiceServer).CreateTemplateDeviceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TemplateDeviceDefinitionService/CreateTemplateDeviceDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDeviceDefinitionServiceServer).CreateTemplateDeviceDefinition(ctx, req.(*TemplateDeviceDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDeviceDefinitionService_UpdateTemplateDeviceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateDeviceDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDeviceDefinitionServiceServer).UpdateTemplateDeviceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TemplateDeviceDefinitionService/UpdateTemplateDeviceDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDeviceDefinitionServiceServer).UpdateTemplateDeviceDefinition(ctx, req.(*TemplateDeviceDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDeviceDefinitionService_GetTemplateDeviceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateDeviceDefinitionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDeviceDefinitionServiceServer).GetTemplateDeviceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TemplateDeviceDefinitionService/GetTemplateDeviceDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDeviceDefinitionServiceServer).GetTemplateDeviceDefinition(ctx, req.(*GetTemplateDeviceDefinitionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDeviceDefinitionService_GetTemplateDeviceDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDeviceDefinitionServiceServer).GetTemplateDeviceDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TemplateDeviceDefinitionService/GetTemplateDeviceDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDeviceDefinitionServiceServer).GetTemplateDeviceDefinitions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDeviceDefinitionService_DeleteTemplateDeviceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDeviceDefinitionServiceServer).DeleteTemplateDeviceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TemplateDeviceDefinitionService/DeleteTemplateDeviceDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDeviceDefinitionServiceServer).DeleteTemplateDeviceDefinition(ctx, req.(*DeleteTemplateDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateDeviceDefinitionService_ServiceDesc is the grpc.ServiceDesc for TemplateDeviceDefinitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateDeviceDefinitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TemplateDeviceDefinitionService",
	HandlerType: (*TemplateDeviceDefinitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemplateDeviceDefinition",
			Handler:    _TemplateDeviceDefinitionService_CreateTemplateDeviceDefinition_Handler,
		},
		{
			MethodName: "UpdateTemplateDeviceDefinition",
			Handler:    _TemplateDeviceDefinitionService_UpdateTemplateDeviceDefinition_Handler,
		},
		{
			MethodName: "GetTemplateDeviceDefinition",
			Handler:    _TemplateDeviceDefinitionService_GetTemplateDeviceDefinition_Handler,
		},
		{
			MethodName: "GetTemplateDeviceDefinitions",
			Handler:    _TemplateDeviceDefinitionService_GetTemplateDeviceDefinitions_Handler,
		},
		{
			MethodName: "DeleteTemplateDeviceDefinition",
			Handler:    _TemplateDeviceDefinitionService_DeleteTemplateDeviceDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/template_device_definition.proto",
}
