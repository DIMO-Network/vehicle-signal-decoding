// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: pkg/grpc/device_settings.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceSettingsServiceClient is the client API for DeviceSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceSettingsServiceClient interface {
	CreateDeviceSettings(ctx context.Context, in *UpdateDeviceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDeviceSettings(ctx context.Context, in *UpdateDeviceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDeviceSettingList(ctx context.Context, in *GetDeviceSettingListRequest, opts ...grpc.CallOption) (*GetDeviceSettingListResponse, error)
	GetDeviceSettingByTemplateName(ctx context.Context, in *GetDeviceSettingByTemplateNameRequest, opts ...grpc.CallOption) (*GetDeviceSettingByTemplateNameResponse, error)
}

type deviceSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceSettingsServiceClient(cc grpc.ClientConnInterface) DeviceSettingsServiceClient {
	return &deviceSettingsServiceClient{cc}
}

func (c *deviceSettingsServiceClient) CreateDeviceSettings(ctx context.Context, in *UpdateDeviceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.DeviceSettingsService/CreateDeviceSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSettingsServiceClient) UpdateDeviceSettings(ctx context.Context, in *UpdateDeviceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.DeviceSettingsService/UpdateDeviceSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSettingsServiceClient) GetDeviceSettingList(ctx context.Context, in *GetDeviceSettingListRequest, opts ...grpc.CallOption) (*GetDeviceSettingListResponse, error) {
	out := new(GetDeviceSettingListResponse)
	err := c.cc.Invoke(ctx, "/grpc.DeviceSettingsService/GetDeviceSettingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSettingsServiceClient) GetDeviceSettingByTemplateName(ctx context.Context, in *GetDeviceSettingByTemplateNameRequest, opts ...grpc.CallOption) (*GetDeviceSettingByTemplateNameResponse, error) {
	out := new(GetDeviceSettingByTemplateNameResponse)
	err := c.cc.Invoke(ctx, "/grpc.DeviceSettingsService/GetDeviceSettingByTemplateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceSettingsServiceServer is the server API for DeviceSettingsService service.
// All implementations must embed UnimplementedDeviceSettingsServiceServer
// for forward compatibility
type DeviceSettingsServiceServer interface {
	CreateDeviceSettings(context.Context, *UpdateDeviceSettingsRequest) (*emptypb.Empty, error)
	UpdateDeviceSettings(context.Context, *UpdateDeviceSettingsRequest) (*emptypb.Empty, error)
	GetDeviceSettingList(context.Context, *GetDeviceSettingListRequest) (*GetDeviceSettingListResponse, error)
	GetDeviceSettingByTemplateName(context.Context, *GetDeviceSettingByTemplateNameRequest) (*GetDeviceSettingByTemplateNameResponse, error)
	mustEmbedUnimplementedDeviceSettingsServiceServer()
}

// UnimplementedDeviceSettingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceSettingsServiceServer struct {
}

func (UnimplementedDeviceSettingsServiceServer) CreateDeviceSettings(context.Context, *UpdateDeviceSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceSettings not implemented")
}
func (UnimplementedDeviceSettingsServiceServer) UpdateDeviceSettings(context.Context, *UpdateDeviceSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceSettings not implemented")
}
func (UnimplementedDeviceSettingsServiceServer) GetDeviceSettingList(context.Context, *GetDeviceSettingListRequest) (*GetDeviceSettingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSettingList not implemented")
}
func (UnimplementedDeviceSettingsServiceServer) GetDeviceSettingByTemplateName(context.Context, *GetDeviceSettingByTemplateNameRequest) (*GetDeviceSettingByTemplateNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSettingByTemplateName not implemented")
}
func (UnimplementedDeviceSettingsServiceServer) mustEmbedUnimplementedDeviceSettingsServiceServer() {}

// UnsafeDeviceSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceSettingsServiceServer will
// result in compilation errors.
type UnsafeDeviceSettingsServiceServer interface {
	mustEmbedUnimplementedDeviceSettingsServiceServer()
}

func RegisterDeviceSettingsServiceServer(s grpc.ServiceRegistrar, srv DeviceSettingsServiceServer) {
	s.RegisterService(&DeviceSettingsService_ServiceDesc, srv)
}

func _DeviceSettingsService_CreateDeviceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSettingsServiceServer).CreateDeviceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeviceSettingsService/CreateDeviceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSettingsServiceServer).CreateDeviceSettings(ctx, req.(*UpdateDeviceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSettingsService_UpdateDeviceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSettingsServiceServer).UpdateDeviceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeviceSettingsService/UpdateDeviceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSettingsServiceServer).UpdateDeviceSettings(ctx, req.(*UpdateDeviceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSettingsService_GetDeviceSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceSettingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSettingsServiceServer).GetDeviceSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeviceSettingsService/GetDeviceSettingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSettingsServiceServer).GetDeviceSettingList(ctx, req.(*GetDeviceSettingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSettingsService_GetDeviceSettingByTemplateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceSettingByTemplateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSettingsServiceServer).GetDeviceSettingByTemplateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeviceSettingsService/GetDeviceSettingByTemplateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSettingsServiceServer).GetDeviceSettingByTemplateName(ctx, req.(*GetDeviceSettingByTemplateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceSettingsService_ServiceDesc is the grpc.ServiceDesc for DeviceSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DeviceSettingsService",
	HandlerType: (*DeviceSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeviceSettings",
			Handler:    _DeviceSettingsService_CreateDeviceSettings_Handler,
		},
		{
			MethodName: "UpdateDeviceSettings",
			Handler:    _DeviceSettingsService_UpdateDeviceSettings_Handler,
		},
		{
			MethodName: "GetDeviceSettingList",
			Handler:    _DeviceSettingsService_GetDeviceSettingList_Handler,
		},
		{
			MethodName: "GetDeviceSettingByTemplateName",
			Handler:    _DeviceSettingsService_GetDeviceSettingByTemplateName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/device_settings.proto",
}
