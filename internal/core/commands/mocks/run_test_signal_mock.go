// Code generated by MockGen. DO NOT EDIT.
// Source: run_test_signal.go
//
// Generated by this command:
//
//	mockgen -source run_test_signal.go -destination mocks/run_test_signal_mock.go
//
// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	context "context"
	reflect "reflect"

	commands "github.com/DIMO-Network/vehicle-signal-decoding/internal/core/commands"
	gomock "go.uber.org/mock/gomock"
)

// MockRunTestSignalCommandHandler is a mock of RunTestSignalCommandHandler interface.
type MockRunTestSignalCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRunTestSignalCommandHandlerMockRecorder
}

// MockRunTestSignalCommandHandlerMockRecorder is the mock recorder for MockRunTestSignalCommandHandler.
type MockRunTestSignalCommandHandlerMockRecorder struct {
	mock *MockRunTestSignalCommandHandler
}

// NewMockRunTestSignalCommandHandler creates a new mock instance.
func NewMockRunTestSignalCommandHandler(ctrl *gomock.Controller) *MockRunTestSignalCommandHandler {
	mock := &MockRunTestSignalCommandHandler{ctrl: ctrl}
	mock.recorder = &MockRunTestSignalCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunTestSignalCommandHandler) EXPECT() *MockRunTestSignalCommandHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRunTestSignalCommandHandler) Execute(ctx context.Context, command *commands.RunTestSignalCommandRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockRunTestSignalCommandHandlerMockRecorder) Execute(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRunTestSignalCommandHandler)(nil).Execute), ctx, command)
}
