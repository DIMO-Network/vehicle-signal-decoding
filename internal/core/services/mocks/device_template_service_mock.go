// Code generated by MockGen. DO NOT EDIT.
// Source: device_template_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceTemplateService is a mock of DeviceTemplateService interface.
type MockDeviceTemplateService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceTemplateServiceMockRecorder
}

// MockDeviceTemplateServiceMockRecorder is the mock recorder for MockDeviceTemplateService.
type MockDeviceTemplateServiceMockRecorder struct {
	mock *MockDeviceTemplateService
}

// NewMockDeviceTemplateService creates a new mock instance.
func NewMockDeviceTemplateService(ctrl *gomock.Controller) *MockDeviceTemplateService {
	mock := &MockDeviceTemplateService{ctrl: ctrl}
	mock.recorder = &MockDeviceTemplateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceTemplateService) EXPECT() *MockDeviceTemplateServiceMockRecorder {
	return m.recorder
}

// AssociateTemplate mocks base method.
func (m *MockDeviceTemplateService) AssociateTemplate(ctx context.Context, vin, templateDbcURL, templatePidURL, templateSettingURL, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTemplate", ctx, vin, templateDbcURL, templatePidURL, templateSettingURL, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateTemplate indicates an expected call of AssociateTemplate.
func (mr *MockDeviceTemplateServiceMockRecorder) AssociateTemplate(ctx, vin, templateDbcURL, templatePidURL, templateSettingURL, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTemplate", reflect.TypeOf((*MockDeviceTemplateService)(nil).AssociateTemplate), ctx, vin, templateDbcURL, templatePidURL, templateSettingURL, version)
}
