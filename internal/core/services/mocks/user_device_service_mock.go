// Code generated by MockGen. DO NOT EDIT.
// Source: user_device_service.go
//
// Generated by this command:
//
//	mockgen -source user_device_service.go -destination mocks/user_device_service_mock.go
//
// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/devices-api/pkg/grpc"
	appmodels "github.com/DIMO-Network/vehicle-signal-decoding/internal/core/appmodels"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDevicesService is a mock of UserDevicesService interface.
type MockUserDevicesService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDevicesServiceMockRecorder
}

// MockUserDevicesServiceMockRecorder is the mock recorder for MockUserDevicesService.
type MockUserDevicesServiceMockRecorder struct {
	mock *MockUserDevicesService
}

// NewMockUserDevicesService creates a new mock instance.
func NewMockUserDevicesService(ctrl *gomock.Controller) *MockUserDevicesService {
	mock := &MockUserDevicesService{ctrl: ctrl}
	mock.recorder = &MockUserDevicesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDevicesService) EXPECT() *MockUserDevicesServiceMockRecorder {
	return m.recorder
}

// GetUserDevice mocks base method.
func (m *MockUserDevicesService) GetUserDevice(ctx context.Context, userDeviceID string) (*grpc.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevice", ctx, userDeviceID)
	ret0, _ := ret[0].(*grpc.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevice indicates an expected call of GetUserDevice.
func (mr *MockUserDevicesServiceMockRecorder) GetUserDevice(ctx, userDeviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevice", reflect.TypeOf((*MockUserDevicesService)(nil).GetUserDevice), ctx, userDeviceID)
}

// GetUserDeviceByAutoPIUnitID mocks base method.
func (m *MockUserDevicesService) GetUserDeviceByAutoPIUnitID(ctx context.Context, id string) (*appmodels.UserDeviceAutoPIUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDeviceByAutoPIUnitID", ctx, id)
	ret0, _ := ret[0].(*appmodels.UserDeviceAutoPIUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDeviceByAutoPIUnitID indicates an expected call of GetUserDeviceByAutoPIUnitID.
func (mr *MockUserDevicesServiceMockRecorder) GetUserDeviceByAutoPIUnitID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDeviceByAutoPIUnitID", reflect.TypeOf((*MockUserDevicesService)(nil).GetUserDeviceByAutoPIUnitID), ctx, id)
}

// GetUserDeviceByEthAddr mocks base method.
func (m *MockUserDevicesService) GetUserDeviceByEthAddr(ctx context.Context, address common.Address) (*grpc.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDeviceByEthAddr", ctx, address)
	ret0, _ := ret[0].(*grpc.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDeviceByEthAddr indicates an expected call of GetUserDeviceByEthAddr.
func (mr *MockUserDevicesServiceMockRecorder) GetUserDeviceByEthAddr(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDeviceByEthAddr", reflect.TypeOf((*MockUserDevicesService)(nil).GetUserDeviceByEthAddr), ctx, address)
}

// GetUserDeviceByVIN mocks base method.
func (m *MockUserDevicesService) GetUserDeviceByVIN(ctx context.Context, vin string) (*grpc.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDeviceByVIN", ctx, vin)
	ret0, _ := ret[0].(*grpc.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDeviceByVIN indicates an expected call of GetUserDeviceByVIN.
func (mr *MockUserDevicesServiceMockRecorder) GetUserDeviceByVIN(ctx, vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDeviceByVIN", reflect.TypeOf((*MockUserDevicesService)(nil).GetUserDeviceByVIN), ctx, vin)
}
