// Code generated by MockGen. DO NOT EDIT.
// Source: prometheus_metric_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrometheusMetricService is a mock of PrometheusMetricService interface.
type MockPrometheusMetricService struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusMetricServiceMockRecorder
}

// MockPrometheusMetricServiceMockRecorder is the mock recorder for MockPrometheusMetricService.
type MockPrometheusMetricServiceMockRecorder struct {
	mock *MockPrometheusMetricService
}

// NewMockPrometheusMetricService creates a new mock instance.
func NewMockPrometheusMetricService(ctrl *gomock.Controller) *MockPrometheusMetricService {
	mock := &MockPrometheusMetricService{ctrl: ctrl}
	mock.recorder = &MockPrometheusMetricServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusMetricService) EXPECT() *MockPrometheusMetricServiceMockRecorder {
	return m.recorder
}

// BadRequestError mocks base method.
func (m *MockPrometheusMetricService) BadRequestError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BadRequestError")
}

// BadRequestError indicates an expected call of BadRequestError.
func (mr *MockPrometheusMetricServiceMockRecorder) BadRequestError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequestError", reflect.TypeOf((*MockPrometheusMetricService)(nil).BadRequestError))
}

// InternalError mocks base method.
func (m *MockPrometheusMetricService) InternalError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InternalError")
}

// InternalError indicates an expected call of InternalError.
func (mr *MockPrometheusMetricServiceMockRecorder) InternalError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalError", reflect.TypeOf((*MockPrometheusMetricService)(nil).InternalError))
}

// Success mocks base method.
func (m *MockPrometheusMetricService) Success() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Success")
}

// Success indicates an expected call of Success.
func (mr *MockPrometheusMetricServiceMockRecorder) Success() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockPrometheusMetricService)(nil).Success))
}
