// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Template is an object representing the database table.
type Template struct {
	TemplateName       string      `boil:"template_name" json:"template_name" toml:"template_name" yaml:"template_name"`
	ParentTemplateName null.String `boil:"parent_template_name" json:"parent_template_name,omitempty" toml:"parent_template_name" yaml:"parent_template_name,omitempty"`
	TemplateType       null.String `boil:"template_type" json:"template_type,omitempty" toml:"template_type" yaml:"template_type,omitempty"`
	Version            string      `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Protocol           string      `boil:"protocol" json:"protocol" toml:"protocol" yaml:"protocol"`
	Powertrain         string      `boil:"powertrain" json:"powertrain" toml:"powertrain" yaml:"powertrain"`

	R *templateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L templateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplateColumns = struct {
	TemplateName       string
	ParentTemplateName string
	TemplateType       string
	Version            string
	CreatedAt          string
	UpdatedAt          string
	Protocol           string
	Powertrain         string
}{
	TemplateName:       "template_name",
	ParentTemplateName: "parent_template_name",
	TemplateType:       "template_type",
	Version:            "version",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	Protocol:           "protocol",
	Powertrain:         "powertrain",
}

var TemplateTableColumns = struct {
	TemplateName       string
	ParentTemplateName string
	TemplateType       string
	Version            string
	CreatedAt          string
	UpdatedAt          string
	Protocol           string
	Powertrain         string
}{
	TemplateName:       "templates.template_name",
	ParentTemplateName: "templates.parent_template_name",
	TemplateType:       "templates.template_type",
	Version:            "templates.version",
	CreatedAt:          "templates.created_at",
	UpdatedAt:          "templates.updated_at",
	Protocol:           "templates.protocol",
	Powertrain:         "templates.powertrain",
}

// Generated where

var TemplateWhere = struct {
	TemplateName       whereHelperstring
	ParentTemplateName whereHelpernull_String
	TemplateType       whereHelpernull_String
	Version            whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	Protocol           whereHelperstring
	Powertrain         whereHelperstring
}{
	TemplateName:       whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"templates\".\"template_name\""},
	ParentTemplateName: whereHelpernull_String{field: "\"vehicle_signal_decoding_api\".\"templates\".\"parent_template_name\""},
	TemplateType:       whereHelpernull_String{field: "\"vehicle_signal_decoding_api\".\"templates\".\"template_type\""},
	Version:            whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"templates\".\"version\""},
	CreatedAt:          whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"templates\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"templates\".\"updated_at\""},
	Protocol:           whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"templates\".\"protocol\""},
	Powertrain:         whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"templates\".\"powertrain\""},
}

// TemplateRels is where relationship names are stored.
var TemplateRels = struct {
	TemplateTemplateType                  string
	TemplateNameDBCFile                   string
	TemplateNameDeviceSettings            string
	TemplateNamePidConfigs                string
	TemplateNameTemplateDeviceDefinitions string
	TemplateNameTemplateVehicles          string
}{
	TemplateTemplateType:                  "TemplateTemplateType",
	TemplateNameDBCFile:                   "TemplateNameDBCFile",
	TemplateNameDeviceSettings:            "TemplateNameDeviceSettings",
	TemplateNamePidConfigs:                "TemplateNamePidConfigs",
	TemplateNameTemplateDeviceDefinitions: "TemplateNameTemplateDeviceDefinitions",
	TemplateNameTemplateVehicles:          "TemplateNameTemplateVehicles",
}

// templateR is where relationships are stored.
type templateR struct {
	TemplateTemplateType                  *TemplateType                 `boil:"TemplateTemplateType" json:"TemplateTemplateType" toml:"TemplateTemplateType" yaml:"TemplateTemplateType"`
	TemplateNameDBCFile                   *DBCFile                      `boil:"TemplateNameDBCFile" json:"TemplateNameDBCFile" toml:"TemplateNameDBCFile" yaml:"TemplateNameDBCFile"`
	TemplateNameDeviceSettings            DeviceSettingSlice            `boil:"TemplateNameDeviceSettings" json:"TemplateNameDeviceSettings" toml:"TemplateNameDeviceSettings" yaml:"TemplateNameDeviceSettings"`
	TemplateNamePidConfigs                PidConfigSlice                `boil:"TemplateNamePidConfigs" json:"TemplateNamePidConfigs" toml:"TemplateNamePidConfigs" yaml:"TemplateNamePidConfigs"`
	TemplateNameTemplateDeviceDefinitions TemplateDeviceDefinitionSlice `boil:"TemplateNameTemplateDeviceDefinitions" json:"TemplateNameTemplateDeviceDefinitions" toml:"TemplateNameTemplateDeviceDefinitions" yaml:"TemplateNameTemplateDeviceDefinitions"`
	TemplateNameTemplateVehicles          TemplateVehicleSlice          `boil:"TemplateNameTemplateVehicles" json:"TemplateNameTemplateVehicles" toml:"TemplateNameTemplateVehicles" yaml:"TemplateNameTemplateVehicles"`
}

// NewStruct creates a new relationship struct
func (*templateR) NewStruct() *templateR {
	return &templateR{}
}

func (r *templateR) GetTemplateTemplateType() *TemplateType {
	if r == nil {
		return nil
	}
	return r.TemplateTemplateType
}

func (r *templateR) GetTemplateNameDBCFile() *DBCFile {
	if r == nil {
		return nil
	}
	return r.TemplateNameDBCFile
}

func (r *templateR) GetTemplateNameDeviceSettings() DeviceSettingSlice {
	if r == nil {
		return nil
	}
	return r.TemplateNameDeviceSettings
}

func (r *templateR) GetTemplateNamePidConfigs() PidConfigSlice {
	if r == nil {
		return nil
	}
	return r.TemplateNamePidConfigs
}

func (r *templateR) GetTemplateNameTemplateDeviceDefinitions() TemplateDeviceDefinitionSlice {
	if r == nil {
		return nil
	}
	return r.TemplateNameTemplateDeviceDefinitions
}

func (r *templateR) GetTemplateNameTemplateVehicles() TemplateVehicleSlice {
	if r == nil {
		return nil
	}
	return r.TemplateNameTemplateVehicles
}

// templateL is where Load methods for each relationship are stored.
type templateL struct{}

var (
	templateAllColumns            = []string{"template_name", "parent_template_name", "template_type", "version", "created_at", "updated_at", "protocol", "powertrain"}
	templateColumnsWithoutDefault = []string{"template_name", "version", "protocol", "powertrain"}
	templateColumnsWithDefault    = []string{"parent_template_name", "template_type", "created_at", "updated_at"}
	templatePrimaryKeyColumns     = []string{"template_name"}
	templateGeneratedColumns      = []string{}
)

type (
	// TemplateSlice is an alias for a slice of pointers to Template.
	// This should almost always be used instead of []Template.
	TemplateSlice []*Template
	// TemplateHook is the signature for custom Template hook methods
	TemplateHook func(context.Context, boil.ContextExecutor, *Template) error

	templateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templateType                 = reflect.TypeOf(&Template{})
	templateMapping              = queries.MakeStructMapping(templateType)
	templatePrimaryKeyMapping, _ = queries.BindMapping(templateType, templateMapping, templatePrimaryKeyColumns)
	templateInsertCacheMut       sync.RWMutex
	templateInsertCache          = make(map[string]insertCache)
	templateUpdateCacheMut       sync.RWMutex
	templateUpdateCache          = make(map[string]updateCache)
	templateUpsertCacheMut       sync.RWMutex
	templateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var templateAfterSelectHooks []TemplateHook

var templateBeforeInsertHooks []TemplateHook
var templateAfterInsertHooks []TemplateHook

var templateBeforeUpdateHooks []TemplateHook
var templateAfterUpdateHooks []TemplateHook

var templateBeforeDeleteHooks []TemplateHook
var templateAfterDeleteHooks []TemplateHook

var templateBeforeUpsertHooks []TemplateHook
var templateAfterUpsertHooks []TemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Template) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Template) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Template) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Template) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Template) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Template) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Template) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Template) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Template) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTemplateHook registers your hook function for all future operations.
func AddTemplateHook(hookPoint boil.HookPoint, templateHook TemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		templateAfterSelectHooks = append(templateAfterSelectHooks, templateHook)
	case boil.BeforeInsertHook:
		templateBeforeInsertHooks = append(templateBeforeInsertHooks, templateHook)
	case boil.AfterInsertHook:
		templateAfterInsertHooks = append(templateAfterInsertHooks, templateHook)
	case boil.BeforeUpdateHook:
		templateBeforeUpdateHooks = append(templateBeforeUpdateHooks, templateHook)
	case boil.AfterUpdateHook:
		templateAfterUpdateHooks = append(templateAfterUpdateHooks, templateHook)
	case boil.BeforeDeleteHook:
		templateBeforeDeleteHooks = append(templateBeforeDeleteHooks, templateHook)
	case boil.AfterDeleteHook:
		templateAfterDeleteHooks = append(templateAfterDeleteHooks, templateHook)
	case boil.BeforeUpsertHook:
		templateBeforeUpsertHooks = append(templateBeforeUpsertHooks, templateHook)
	case boil.AfterUpsertHook:
		templateAfterUpsertHooks = append(templateAfterUpsertHooks, templateHook)
	}
}

// One returns a single template record from the query.
func (q templateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Template, error) {
	o := &Template{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for templates")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Template records from the query.
func (q templateQuery) All(ctx context.Context, exec boil.ContextExecutor) (TemplateSlice, error) {
	var o []*Template

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Template slice")
	}

	if len(templateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Template records in the query.
func (q templateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count templates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q templateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if templates exists")
	}

	return count > 0, nil
}

// TemplateTemplateType pointed to by the foreign key.
func (o *Template) TemplateTemplateType(mods ...qm.QueryMod) templateTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"type_name\" = ?", o.TemplateType),
	}

	queryMods = append(queryMods, mods...)

	return TemplateTypes(queryMods...)
}

// TemplateNameDBCFile pointed to by the foreign key.
func (o *Template) TemplateNameDBCFile(mods ...qm.QueryMod) dbcFileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateName),
	}

	queryMods = append(queryMods, mods...)

	return DBCFiles(queryMods...)
}

// TemplateNameDeviceSettings retrieves all the device_setting's DeviceSettings with an executor via template_name column.
func (o *Template) TemplateNameDeviceSettings(mods ...qm.QueryMod) deviceSettingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_signal_decoding_api\".\"device_settings\".\"template_name\"=?", o.TemplateName),
	)

	return DeviceSettings(queryMods...)
}

// TemplateNamePidConfigs retrieves all the pid_config's PidConfigs with an executor via template_name column.
func (o *Template) TemplateNamePidConfigs(mods ...qm.QueryMod) pidConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_signal_decoding_api\".\"pid_configs\".\"template_name\"=?", o.TemplateName),
	)

	return PidConfigs(queryMods...)
}

// TemplateNameTemplateDeviceDefinitions retrieves all the template_device_definition's TemplateDeviceDefinitions with an executor via template_name column.
func (o *Template) TemplateNameTemplateDeviceDefinitions(mods ...qm.QueryMod) templateDeviceDefinitionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_signal_decoding_api\".\"template_device_definitions\".\"template_name\"=?", o.TemplateName),
	)

	return TemplateDeviceDefinitions(queryMods...)
}

// TemplateNameTemplateVehicles retrieves all the template_vehicle's TemplateVehicles with an executor via template_name column.
func (o *Template) TemplateNameTemplateVehicles(mods ...qm.QueryMod) templateVehicleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_signal_decoding_api\".\"template_vehicles\".\"template_name\"=?", o.TemplateName),
	)

	return TemplateVehicles(queryMods...)
}

// LoadTemplateTemplateType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (templateL) LoadTemplateTemplateType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplate interface{}, mods queries.Applicator) error {
	var slice []*Template
	var object *Template

	if singular {
		var ok bool
		object, ok = maybeTemplate.(*Template)
		if !ok {
			object = new(Template)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplate))
			}
		}
	} else {
		s, ok := maybeTemplate.(*[]*Template)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateR{}
		}
		if !queries.IsNil(object.TemplateType) {
			args = append(args, object.TemplateType)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TemplateType) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TemplateType) {
				args = append(args, obj.TemplateType)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.template_types`),
		qm.WhereIn(`vehicle_signal_decoding_api.template_types.type_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TemplateType")
	}

	var resultSlice []*TemplateType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TemplateType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for template_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_types")
	}

	if len(templateTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateTemplateType = foreign
		if foreign.R == nil {
			foreign.R = &templateTypeR{}
		}
		foreign.R.Templates = append(foreign.R.Templates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TemplateType, foreign.TypeName) {
				local.R.TemplateTemplateType = foreign
				if foreign.R == nil {
					foreign.R = &templateTypeR{}
				}
				foreign.R.Templates = append(foreign.R.Templates, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplateNameDBCFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (templateL) LoadTemplateNameDBCFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplate interface{}, mods queries.Applicator) error {
	var slice []*Template
	var object *Template

	if singular {
		var ok bool
		object, ok = maybeTemplate.(*Template)
		if !ok {
			object = new(Template)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplate))
			}
		}
	} else {
		s, ok := maybeTemplate.(*[]*Template)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateR{}
		}
		args = append(args, object.TemplateName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateR{}
			}

			for _, a := range args {
				if a == obj.TemplateName {
					continue Outer
				}
			}

			args = append(args, obj.TemplateName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.dbc_files`),
		qm.WhereIn(`vehicle_signal_decoding_api.dbc_files.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DBCFile")
	}

	var resultSlice []*DBCFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DBCFile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dbc_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dbc_files")
	}

	if len(dbcFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateNameDBCFile = foreign
		if foreign.R == nil {
			foreign.R = &dbcFileR{}
		}
		foreign.R.TemplateNameTemplate = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateName == foreign.TemplateName {
				local.R.TemplateNameDBCFile = foreign
				if foreign.R == nil {
					foreign.R = &dbcFileR{}
				}
				foreign.R.TemplateNameTemplate = local
				break
			}
		}
	}

	return nil
}

// LoadTemplateNameDeviceSettings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templateL) LoadTemplateNameDeviceSettings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplate interface{}, mods queries.Applicator) error {
	var slice []*Template
	var object *Template

	if singular {
		var ok bool
		object, ok = maybeTemplate.(*Template)
		if !ok {
			object = new(Template)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplate))
			}
		}
	} else {
		s, ok := maybeTemplate.(*[]*Template)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateR{}
		}
		args = append(args, object.TemplateName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TemplateName) {
					continue Outer
				}
			}

			args = append(args, obj.TemplateName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.device_settings`),
		qm.WhereIn(`vehicle_signal_decoding_api.device_settings.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load device_settings")
	}

	var resultSlice []*DeviceSetting
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice device_settings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on device_settings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_settings")
	}

	if len(deviceSettingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TemplateNameDeviceSettings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deviceSettingR{}
			}
			foreign.R.TemplateNameTemplate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.TemplateName, foreign.TemplateName) {
				local.R.TemplateNameDeviceSettings = append(local.R.TemplateNameDeviceSettings, foreign)
				if foreign.R == nil {
					foreign.R = &deviceSettingR{}
				}
				foreign.R.TemplateNameTemplate = local
				break
			}
		}
	}

	return nil
}

// LoadTemplateNamePidConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templateL) LoadTemplateNamePidConfigs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplate interface{}, mods queries.Applicator) error {
	var slice []*Template
	var object *Template

	if singular {
		var ok bool
		object, ok = maybeTemplate.(*Template)
		if !ok {
			object = new(Template)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplate))
			}
		}
	} else {
		s, ok := maybeTemplate.(*[]*Template)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateR{}
		}
		args = append(args, object.TemplateName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateR{}
			}

			for _, a := range args {
				if a == obj.TemplateName {
					continue Outer
				}
			}

			args = append(args, obj.TemplateName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.pid_configs`),
		qm.WhereIn(`vehicle_signal_decoding_api.pid_configs.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pid_configs")
	}

	var resultSlice []*PidConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pid_configs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pid_configs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pid_configs")
	}

	if len(pidConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TemplateNamePidConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pidConfigR{}
			}
			foreign.R.TemplateNameTemplate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TemplateName == foreign.TemplateName {
				local.R.TemplateNamePidConfigs = append(local.R.TemplateNamePidConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &pidConfigR{}
				}
				foreign.R.TemplateNameTemplate = local
				break
			}
		}
	}

	return nil
}

// LoadTemplateNameTemplateDeviceDefinitions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templateL) LoadTemplateNameTemplateDeviceDefinitions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplate interface{}, mods queries.Applicator) error {
	var slice []*Template
	var object *Template

	if singular {
		var ok bool
		object, ok = maybeTemplate.(*Template)
		if !ok {
			object = new(Template)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplate))
			}
		}
	} else {
		s, ok := maybeTemplate.(*[]*Template)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateR{}
		}
		args = append(args, object.TemplateName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateR{}
			}

			for _, a := range args {
				if a == obj.TemplateName {
					continue Outer
				}
			}

			args = append(args, obj.TemplateName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.template_device_definitions`),
		qm.WhereIn(`vehicle_signal_decoding_api.template_device_definitions.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load template_device_definitions")
	}

	var resultSlice []*TemplateDeviceDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice template_device_definitions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on template_device_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_device_definitions")
	}

	if len(templateDeviceDefinitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TemplateNameTemplateDeviceDefinitions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &templateDeviceDefinitionR{}
			}
			foreign.R.TemplateNameTemplate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TemplateName == foreign.TemplateName {
				local.R.TemplateNameTemplateDeviceDefinitions = append(local.R.TemplateNameTemplateDeviceDefinitions, foreign)
				if foreign.R == nil {
					foreign.R = &templateDeviceDefinitionR{}
				}
				foreign.R.TemplateNameTemplate = local
				break
			}
		}
	}

	return nil
}

// LoadTemplateNameTemplateVehicles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templateL) LoadTemplateNameTemplateVehicles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplate interface{}, mods queries.Applicator) error {
	var slice []*Template
	var object *Template

	if singular {
		var ok bool
		object, ok = maybeTemplate.(*Template)
		if !ok {
			object = new(Template)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplate))
			}
		}
	} else {
		s, ok := maybeTemplate.(*[]*Template)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateR{}
		}
		args = append(args, object.TemplateName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateR{}
			}

			for _, a := range args {
				if a == obj.TemplateName {
					continue Outer
				}
			}

			args = append(args, obj.TemplateName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.template_vehicles`),
		qm.WhereIn(`vehicle_signal_decoding_api.template_vehicles.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load template_vehicles")
	}

	var resultSlice []*TemplateVehicle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice template_vehicles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on template_vehicles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_vehicles")
	}

	if len(templateVehicleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TemplateNameTemplateVehicles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &templateVehicleR{}
			}
			foreign.R.TemplateNameTemplate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TemplateName == foreign.TemplateName {
				local.R.TemplateNameTemplateVehicles = append(local.R.TemplateNameTemplateVehicles, foreign)
				if foreign.R == nil {
					foreign.R = &templateVehicleR{}
				}
				foreign.R.TemplateNameTemplate = local
				break
			}
		}
	}

	return nil
}

// SetTemplateTemplateType of the template to the related item.
// Sets o.R.TemplateTemplateType to related.
// Adds o to related.R.Templates.
func (o *Template) SetTemplateTemplateType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TemplateType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_type"}),
		strmangle.WhereClause("\"", "\"", 2, templatePrimaryKeyColumns),
	)
	values := []interface{}{related.TypeName, o.TemplateName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TemplateType, related.TypeName)
	if o.R == nil {
		o.R = &templateR{
			TemplateTemplateType: related,
		}
	} else {
		o.R.TemplateTemplateType = related
	}

	if related.R == nil {
		related.R = &templateTypeR{
			Templates: TemplateSlice{o},
		}
	} else {
		related.R.Templates = append(related.R.Templates, o)
	}

	return nil
}

// RemoveTemplateTemplateType relationship.
// Sets o.R.TemplateTemplateType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Template) RemoveTemplateTemplateType(ctx context.Context, exec boil.ContextExecutor, related *TemplateType) error {
	var err error

	queries.SetScanner(&o.TemplateType, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("template_type")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TemplateTemplateType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Templates {
		if queries.Equal(o.TemplateType, ri.TemplateType) {
			continue
		}

		ln := len(related.R.Templates)
		if ln > 1 && i < ln-1 {
			related.R.Templates[i] = related.R.Templates[ln-1]
		}
		related.R.Templates = related.R.Templates[:ln-1]
		break
	}
	return nil
}

// SetTemplateNameDBCFile of the template to the related item.
// Sets o.R.TemplateNameDBCFile to related.
// Adds o to related.R.TemplateNameTemplate.
func (o *Template) SetTemplateNameDBCFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DBCFile) error {
	var err error

	if insert {
		related.TemplateName = o.TemplateName

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"vehicle_signal_decoding_api\".\"dbc_files\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"template_name"}),
			strmangle.WhereClause("\"", "\"", 2, dbcFilePrimaryKeyColumns),
		)
		values := []interface{}{o.TemplateName, related.TemplateName}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.TemplateName = o.TemplateName
	}

	if o.R == nil {
		o.R = &templateR{
			TemplateNameDBCFile: related,
		}
	} else {
		o.R.TemplateNameDBCFile = related
	}

	if related.R == nil {
		related.R = &dbcFileR{
			TemplateNameTemplate: o,
		}
	} else {
		related.R.TemplateNameTemplate = o
	}
	return nil
}

// AddTemplateNameDeviceSettings adds the given related objects to the existing relationships
// of the template, optionally inserting them as new records.
// Appends related to o.R.TemplateNameDeviceSettings.
// Sets related.R.TemplateNameTemplate appropriately.
func (o *Template) AddTemplateNameDeviceSettings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeviceSetting) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TemplateName, o.TemplateName)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_signal_decoding_api\".\"device_settings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"template_name"}),
				strmangle.WhereClause("\"", "\"", 2, deviceSettingPrimaryKeyColumns),
			)
			values := []interface{}{o.TemplateName, rel.Name}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TemplateName, o.TemplateName)
		}
	}

	if o.R == nil {
		o.R = &templateR{
			TemplateNameDeviceSettings: related,
		}
	} else {
		o.R.TemplateNameDeviceSettings = append(o.R.TemplateNameDeviceSettings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deviceSettingR{
				TemplateNameTemplate: o,
			}
		} else {
			rel.R.TemplateNameTemplate = o
		}
	}
	return nil
}

// SetTemplateNameDeviceSettings removes all previously related items of the
// template replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TemplateNameTemplate's TemplateNameDeviceSettings accordingly.
// Replaces o.R.TemplateNameDeviceSettings with related.
// Sets related.R.TemplateNameTemplate's TemplateNameDeviceSettings accordingly.
func (o *Template) SetTemplateNameDeviceSettings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeviceSetting) error {
	query := "update \"vehicle_signal_decoding_api\".\"device_settings\" set \"template_name\" = null where \"template_name\" = $1"
	values := []interface{}{o.TemplateName}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TemplateNameDeviceSettings {
			queries.SetScanner(&rel.TemplateName, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TemplateNameTemplate = nil
		}
		o.R.TemplateNameDeviceSettings = nil
	}

	return o.AddTemplateNameDeviceSettings(ctx, exec, insert, related...)
}

// RemoveTemplateNameDeviceSettings relationships from objects passed in.
// Removes related items from R.TemplateNameDeviceSettings (uses pointer comparison, removal does not keep order)
// Sets related.R.TemplateNameTemplate.
func (o *Template) RemoveTemplateNameDeviceSettings(ctx context.Context, exec boil.ContextExecutor, related ...*DeviceSetting) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TemplateName, nil)
		if rel.R != nil {
			rel.R.TemplateNameTemplate = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("template_name")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TemplateNameDeviceSettings {
			if rel != ri {
				continue
			}

			ln := len(o.R.TemplateNameDeviceSettings)
			if ln > 1 && i < ln-1 {
				o.R.TemplateNameDeviceSettings[i] = o.R.TemplateNameDeviceSettings[ln-1]
			}
			o.R.TemplateNameDeviceSettings = o.R.TemplateNameDeviceSettings[:ln-1]
			break
		}
	}

	return nil
}

// AddTemplateNamePidConfigs adds the given related objects to the existing relationships
// of the template, optionally inserting them as new records.
// Appends related to o.R.TemplateNamePidConfigs.
// Sets related.R.TemplateNameTemplate appropriately.
func (o *Template) AddTemplateNamePidConfigs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PidConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TemplateName = o.TemplateName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_signal_decoding_api\".\"pid_configs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"template_name"}),
				strmangle.WhereClause("\"", "\"", 2, pidConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.TemplateName, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TemplateName = o.TemplateName
		}
	}

	if o.R == nil {
		o.R = &templateR{
			TemplateNamePidConfigs: related,
		}
	} else {
		o.R.TemplateNamePidConfigs = append(o.R.TemplateNamePidConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pidConfigR{
				TemplateNameTemplate: o,
			}
		} else {
			rel.R.TemplateNameTemplate = o
		}
	}
	return nil
}

// AddTemplateNameTemplateDeviceDefinitions adds the given related objects to the existing relationships
// of the template, optionally inserting them as new records.
// Appends related to o.R.TemplateNameTemplateDeviceDefinitions.
// Sets related.R.TemplateNameTemplate appropriately.
func (o *Template) AddTemplateNameTemplateDeviceDefinitions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TemplateDeviceDefinition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TemplateName = o.TemplateName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_signal_decoding_api\".\"template_device_definitions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"template_name"}),
				strmangle.WhereClause("\"", "\"", 2, templateDeviceDefinitionPrimaryKeyColumns),
			)
			values := []interface{}{o.TemplateName, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TemplateName = o.TemplateName
		}
	}

	if o.R == nil {
		o.R = &templateR{
			TemplateNameTemplateDeviceDefinitions: related,
		}
	} else {
		o.R.TemplateNameTemplateDeviceDefinitions = append(o.R.TemplateNameTemplateDeviceDefinitions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &templateDeviceDefinitionR{
				TemplateNameTemplate: o,
			}
		} else {
			rel.R.TemplateNameTemplate = o
		}
	}
	return nil
}

// AddTemplateNameTemplateVehicles adds the given related objects to the existing relationships
// of the template, optionally inserting them as new records.
// Appends related to o.R.TemplateNameTemplateVehicles.
// Sets related.R.TemplateNameTemplate appropriately.
func (o *Template) AddTemplateNameTemplateVehicles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TemplateVehicle) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TemplateName = o.TemplateName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_signal_decoding_api\".\"template_vehicles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"template_name"}),
				strmangle.WhereClause("\"", "\"", 2, templateVehiclePrimaryKeyColumns),
			)
			values := []interface{}{o.TemplateName, rel.MakeSlug, rel.YearStart, rel.YearEnd}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TemplateName = o.TemplateName
		}
	}

	if o.R == nil {
		o.R = &templateR{
			TemplateNameTemplateVehicles: related,
		}
	} else {
		o.R.TemplateNameTemplateVehicles = append(o.R.TemplateNameTemplateVehicles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &templateVehicleR{
				TemplateNameTemplate: o,
			}
		} else {
			rel.R.TemplateNameTemplate = o
		}
	}
	return nil
}

// Templates retrieves all the records using an executor.
func Templates(mods ...qm.QueryMod) templateQuery {
	mods = append(mods, qm.From("\"vehicle_signal_decoding_api\".\"templates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_signal_decoding_api\".\"templates\".*"})
	}

	return templateQuery{q}
}

// FindTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplate(ctx context.Context, exec boil.ContextExecutor, templateName string, selectCols ...string) (*Template, error) {
	templateObj := &Template{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_signal_decoding_api\".\"templates\" where \"template_name\"=$1", sel,
	)

	q := queries.Raw(query, templateName)

	err := q.Bind(ctx, exec, templateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from templates")
	}

	if err = templateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return templateObj, err
	}

	return templateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Template) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no templates provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templateInsertCacheMut.RLock()
	cache, cached := templateInsertCache[key]
	templateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templateAllColumns,
			templateColumnsWithDefault,
			templateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templateType, templateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templateType, templateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_signal_decoding_api\".\"templates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_signal_decoding_api\".\"templates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into templates")
	}

	if !cached {
		templateInsertCacheMut.Lock()
		templateInsertCache[key] = cache
		templateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Template.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Template) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	templateUpdateCacheMut.RLock()
	cache, cached := templateUpdateCache[key]
	templateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templateAllColumns,
			templatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update templates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"templates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, templatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templateType, templateMapping, append(wl, templatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update templates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for templates")
	}

	if !cached {
		templateUpdateCacheMut.Lock()
		templateUpdateCache[key] = cache
		templateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q templateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for templates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, templatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in template slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all template")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Template) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no templates provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templateUpsertCacheMut.RLock()
	cache, cached := templateUpsertCache[key]
	templateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			templateAllColumns,
			templateColumnsWithDefault,
			templateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			templateAllColumns,
			templatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert templates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(templatePrimaryKeyColumns))
			copy(conflict, templatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_signal_decoding_api\".\"templates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(templateType, templateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templateType, templateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert templates")
	}

	if !cached {
		templateUpsertCacheMut.Lock()
		templateUpsertCache[key] = cache
		templateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Template record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Template) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Template provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templatePrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"templates\" WHERE \"template_name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for templates")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no templateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for templates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(templateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from template slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for templates")
	}

	if len(templateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Template) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTemplate(ctx, exec, o.TemplateName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_signal_decoding_api\".\"templates\".* FROM \"vehicle_signal_decoding_api\".\"templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TemplateSlice")
	}

	*o = slice

	return nil
}

// TemplateExists checks if the Template row exists.
func TemplateExists(ctx context.Context, exec boil.ContextExecutor, templateName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_signal_decoding_api\".\"templates\" where \"template_name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, templateName)
	}
	row := exec.QueryRowContext(ctx, sql, templateName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if templates exists")
	}

	return exists, nil
}

// Exists checks if the Template row exists.
func (o *Template) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TemplateExists(ctx, exec, o.TemplateName)
}
