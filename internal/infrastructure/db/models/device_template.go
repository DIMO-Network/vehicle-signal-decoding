// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeviceTemplate is an object representing the database table.
type DeviceTemplate struct {
	Vin                string     `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	DeviceEthAddr      null.Bytes `boil:"device_eth_addr" json:"device_eth_addr,omitempty" toml:"device_eth_addr" yaml:"device_eth_addr,omitempty"`
	TemplateDBCURL     string     `boil:"template_dbc_url" json:"template_dbc_url" toml:"template_dbc_url" yaml:"template_dbc_url"`
	TemplatePidURL     string     `boil:"template_pid_url" json:"template_pid_url" toml:"template_pid_url" yaml:"template_pid_url"`
	TemplateSettingURL string     `boil:"template_setting_url" json:"template_setting_url" toml:"template_setting_url" yaml:"template_setting_url"`
	Version            string     `boil:"version" json:"version" toml:"version" yaml:"version"`
	IsTemplateUpdated  bool       `boil:"is_template_updated" json:"is_template_updated" toml:"is_template_updated" yaml:"is_template_updated"`
	CreatedAt          time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *deviceTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceTemplateColumns = struct {
	Vin                string
	DeviceEthAddr      string
	TemplateDBCURL     string
	TemplatePidURL     string
	TemplateSettingURL string
	Version            string
	IsTemplateUpdated  string
	CreatedAt          string
	UpdatedAt          string
}{
	Vin:                "vin",
	DeviceEthAddr:      "device_eth_addr",
	TemplateDBCURL:     "template_dbc_url",
	TemplatePidURL:     "template_pid_url",
	TemplateSettingURL: "template_setting_url",
	Version:            "version",
	IsTemplateUpdated:  "is_template_updated",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var DeviceTemplateTableColumns = struct {
	Vin                string
	DeviceEthAddr      string
	TemplateDBCURL     string
	TemplatePidURL     string
	TemplateSettingURL string
	Version            string
	IsTemplateUpdated  string
	CreatedAt          string
	UpdatedAt          string
}{
	Vin:                "device_template.vin",
	DeviceEthAddr:      "device_template.device_eth_addr",
	TemplateDBCURL:     "device_template.template_dbc_url",
	TemplatePidURL:     "device_template.template_pid_url",
	TemplateSettingURL: "device_template.template_setting_url",
	Version:            "device_template.version",
	IsTemplateUpdated:  "device_template.is_template_updated",
	CreatedAt:          "device_template.created_at",
	UpdatedAt:          "device_template.updated_at",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeviceTemplateWhere = struct {
	Vin                whereHelperstring
	DeviceEthAddr      whereHelpernull_Bytes
	TemplateDBCURL     whereHelperstring
	TemplatePidURL     whereHelperstring
	TemplateSettingURL whereHelperstring
	Version            whereHelperstring
	IsTemplateUpdated  whereHelperbool
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	Vin:                whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"vin\""},
	DeviceEthAddr:      whereHelpernull_Bytes{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"device_eth_addr\""},
	TemplateDBCURL:     whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"template_dbc_url\""},
	TemplatePidURL:     whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"template_pid_url\""},
	TemplateSettingURL: whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"template_setting_url\""},
	Version:            whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"version\""},
	IsTemplateUpdated:  whereHelperbool{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"is_template_updated\""},
	CreatedAt:          whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"device_template\".\"updated_at\""},
}

// DeviceTemplateRels is where relationship names are stored.
var DeviceTemplateRels = struct {
	TemplateDBCURLTemplate     string
	TemplatePidURLTemplate     string
	TemplateSettingURLTemplate string
}{
	TemplateDBCURLTemplate:     "TemplateDBCURLTemplate",
	TemplatePidURLTemplate:     "TemplatePidURLTemplate",
	TemplateSettingURLTemplate: "TemplateSettingURLTemplate",
}

// deviceTemplateR is where relationships are stored.
type deviceTemplateR struct {
	TemplateDBCURLTemplate     *Template `boil:"TemplateDBCURLTemplate" json:"TemplateDBCURLTemplate" toml:"TemplateDBCURLTemplate" yaml:"TemplateDBCURLTemplate"`
	TemplatePidURLTemplate     *Template `boil:"TemplatePidURLTemplate" json:"TemplatePidURLTemplate" toml:"TemplatePidURLTemplate" yaml:"TemplatePidURLTemplate"`
	TemplateSettingURLTemplate *Template `boil:"TemplateSettingURLTemplate" json:"TemplateSettingURLTemplate" toml:"TemplateSettingURLTemplate" yaml:"TemplateSettingURLTemplate"`
}

// NewStruct creates a new relationship struct
func (*deviceTemplateR) NewStruct() *deviceTemplateR {
	return &deviceTemplateR{}
}

func (r *deviceTemplateR) GetTemplateDBCURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateDBCURLTemplate
}

func (r *deviceTemplateR) GetTemplatePidURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplatePidURLTemplate
}

func (r *deviceTemplateR) GetTemplateSettingURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateSettingURLTemplate
}

// deviceTemplateL is where Load methods for each relationship are stored.
type deviceTemplateL struct{}

var (
	deviceTemplateAllColumns            = []string{"vin", "device_eth_addr", "template_dbc_url", "template_pid_url", "template_setting_url", "version", "is_template_updated", "created_at", "updated_at"}
	deviceTemplateColumnsWithoutDefault = []string{"vin", "template_dbc_url", "template_pid_url", "template_setting_url", "version", "is_template_updated"}
	deviceTemplateColumnsWithDefault    = []string{"device_eth_addr", "created_at", "updated_at"}
	deviceTemplatePrimaryKeyColumns     = []string{"vin"}
	deviceTemplateGeneratedColumns      = []string{}
)

type (
	// DeviceTemplateSlice is an alias for a slice of pointers to DeviceTemplate.
	// This should almost always be used instead of []DeviceTemplate.
	DeviceTemplateSlice []*DeviceTemplate
	// DeviceTemplateHook is the signature for custom DeviceTemplate hook methods
	DeviceTemplateHook func(context.Context, boil.ContextExecutor, *DeviceTemplate) error

	deviceTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceTemplateType                 = reflect.TypeOf(&DeviceTemplate{})
	deviceTemplateMapping              = queries.MakeStructMapping(deviceTemplateType)
	deviceTemplatePrimaryKeyMapping, _ = queries.BindMapping(deviceTemplateType, deviceTemplateMapping, deviceTemplatePrimaryKeyColumns)
	deviceTemplateInsertCacheMut       sync.RWMutex
	deviceTemplateInsertCache          = make(map[string]insertCache)
	deviceTemplateUpdateCacheMut       sync.RWMutex
	deviceTemplateUpdateCache          = make(map[string]updateCache)
	deviceTemplateUpsertCacheMut       sync.RWMutex
	deviceTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceTemplateAfterSelectHooks []DeviceTemplateHook

var deviceTemplateBeforeInsertHooks []DeviceTemplateHook
var deviceTemplateAfterInsertHooks []DeviceTemplateHook

var deviceTemplateBeforeUpdateHooks []DeviceTemplateHook
var deviceTemplateAfterUpdateHooks []DeviceTemplateHook

var deviceTemplateBeforeDeleteHooks []DeviceTemplateHook
var deviceTemplateAfterDeleteHooks []DeviceTemplateHook

var deviceTemplateBeforeUpsertHooks []DeviceTemplateHook
var deviceTemplateAfterUpsertHooks []DeviceTemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceTemplateHook registers your hook function for all future operations.
func AddDeviceTemplateHook(hookPoint boil.HookPoint, deviceTemplateHook DeviceTemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceTemplateAfterSelectHooks = append(deviceTemplateAfterSelectHooks, deviceTemplateHook)
	case boil.BeforeInsertHook:
		deviceTemplateBeforeInsertHooks = append(deviceTemplateBeforeInsertHooks, deviceTemplateHook)
	case boil.AfterInsertHook:
		deviceTemplateAfterInsertHooks = append(deviceTemplateAfterInsertHooks, deviceTemplateHook)
	case boil.BeforeUpdateHook:
		deviceTemplateBeforeUpdateHooks = append(deviceTemplateBeforeUpdateHooks, deviceTemplateHook)
	case boil.AfterUpdateHook:
		deviceTemplateAfterUpdateHooks = append(deviceTemplateAfterUpdateHooks, deviceTemplateHook)
	case boil.BeforeDeleteHook:
		deviceTemplateBeforeDeleteHooks = append(deviceTemplateBeforeDeleteHooks, deviceTemplateHook)
	case boil.AfterDeleteHook:
		deviceTemplateAfterDeleteHooks = append(deviceTemplateAfterDeleteHooks, deviceTemplateHook)
	case boil.BeforeUpsertHook:
		deviceTemplateBeforeUpsertHooks = append(deviceTemplateBeforeUpsertHooks, deviceTemplateHook)
	case boil.AfterUpsertHook:
		deviceTemplateAfterUpsertHooks = append(deviceTemplateAfterUpsertHooks, deviceTemplateHook)
	}
}

// One returns a single deviceTemplate record from the query.
func (q deviceTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceTemplate, error) {
	o := &DeviceTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_template")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceTemplate records from the query.
func (q deviceTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceTemplateSlice, error) {
	var o []*DeviceTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceTemplate slice")
	}

	if len(deviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceTemplate records in the query.
func (q deviceTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_template rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_template exists")
	}

	return count > 0, nil
}

// TemplateDBCURLTemplate pointed to by the foreign key.
func (o *DeviceTemplate) TemplateDBCURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateDBCURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// TemplatePidURLTemplate pointed to by the foreign key.
func (o *DeviceTemplate) TemplatePidURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplatePidURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// TemplateSettingURLTemplate pointed to by the foreign key.
func (o *DeviceTemplate) TemplateSettingURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateSettingURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// LoadTemplateDBCURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceTemplateL) LoadTemplateDBCURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceTemplate interface{}, mods queries.Applicator) error {
	var slice []*DeviceTemplate
	var object *DeviceTemplate

	if singular {
		var ok bool
		object, ok = maybeDeviceTemplate.(*DeviceTemplate)
		if !ok {
			object = new(DeviceTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceTemplate))
			}
		}
	} else {
		s, ok := maybeDeviceTemplate.(*[]*DeviceTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceTemplateR{}
		}
		args = append(args, object.TemplateDBCURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceTemplateR{}
			}

			for _, a := range args {
				if a == obj.TemplateDBCURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplateDBCURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(deviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateDBCURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateDBCURLDeviceTemplates = append(foreign.R.TemplateDBCURLDeviceTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateDBCURL == foreign.TemplateName {
				local.R.TemplateDBCURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateDBCURLDeviceTemplates = append(foreign.R.TemplateDBCURLDeviceTemplates, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplatePidURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceTemplateL) LoadTemplatePidURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceTemplate interface{}, mods queries.Applicator) error {
	var slice []*DeviceTemplate
	var object *DeviceTemplate

	if singular {
		var ok bool
		object, ok = maybeDeviceTemplate.(*DeviceTemplate)
		if !ok {
			object = new(DeviceTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceTemplate))
			}
		}
	} else {
		s, ok := maybeDeviceTemplate.(*[]*DeviceTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceTemplateR{}
		}
		args = append(args, object.TemplatePidURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceTemplateR{}
			}

			for _, a := range args {
				if a == obj.TemplatePidURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplatePidURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(deviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplatePidURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplatePidURLDeviceTemplates = append(foreign.R.TemplatePidURLDeviceTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplatePidURL == foreign.TemplateName {
				local.R.TemplatePidURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplatePidURLDeviceTemplates = append(foreign.R.TemplatePidURLDeviceTemplates, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplateSettingURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceTemplateL) LoadTemplateSettingURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceTemplate interface{}, mods queries.Applicator) error {
	var slice []*DeviceTemplate
	var object *DeviceTemplate

	if singular {
		var ok bool
		object, ok = maybeDeviceTemplate.(*DeviceTemplate)
		if !ok {
			object = new(DeviceTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceTemplate))
			}
		}
	} else {
		s, ok := maybeDeviceTemplate.(*[]*DeviceTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceTemplateR{}
		}
		args = append(args, object.TemplateSettingURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceTemplateR{}
			}

			for _, a := range args {
				if a == obj.TemplateSettingURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplateSettingURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(deviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateSettingURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateSettingURLDeviceTemplates = append(foreign.R.TemplateSettingURLDeviceTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateSettingURL == foreign.TemplateName {
				local.R.TemplateSettingURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateSettingURLDeviceTemplates = append(foreign.R.TemplateSettingURLDeviceTemplates, local)
				break
			}
		}
	}

	return nil
}

// SetTemplateDBCURLTemplate of the deviceTemplate to the related item.
// Sets o.R.TemplateDBCURLTemplate to related.
// Adds o to related.R.TemplateDBCURLDeviceTemplates.
func (o *DeviceTemplate) SetTemplateDBCURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_dbc_url"}),
		strmangle.WhereClause("\"", "\"", 2, deviceTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.Vin}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateDBCURL = related.TemplateName
	if o.R == nil {
		o.R = &deviceTemplateR{
			TemplateDBCURLTemplate: related,
		}
	} else {
		o.R.TemplateDBCURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateDBCURLDeviceTemplates: DeviceTemplateSlice{o},
		}
	} else {
		related.R.TemplateDBCURLDeviceTemplates = append(related.R.TemplateDBCURLDeviceTemplates, o)
	}

	return nil
}

// SetTemplatePidURLTemplate of the deviceTemplate to the related item.
// Sets o.R.TemplatePidURLTemplate to related.
// Adds o to related.R.TemplatePidURLDeviceTemplates.
func (o *DeviceTemplate) SetTemplatePidURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_pid_url"}),
		strmangle.WhereClause("\"", "\"", 2, deviceTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.Vin}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplatePidURL = related.TemplateName
	if o.R == nil {
		o.R = &deviceTemplateR{
			TemplatePidURLTemplate: related,
		}
	} else {
		o.R.TemplatePidURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplatePidURLDeviceTemplates: DeviceTemplateSlice{o},
		}
	} else {
		related.R.TemplatePidURLDeviceTemplates = append(related.R.TemplatePidURLDeviceTemplates, o)
	}

	return nil
}

// SetTemplateSettingURLTemplate of the deviceTemplate to the related item.
// Sets o.R.TemplateSettingURLTemplate to related.
// Adds o to related.R.TemplateSettingURLDeviceTemplates.
func (o *DeviceTemplate) SetTemplateSettingURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_setting_url"}),
		strmangle.WhereClause("\"", "\"", 2, deviceTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.Vin}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateSettingURL = related.TemplateName
	if o.R == nil {
		o.R = &deviceTemplateR{
			TemplateSettingURLTemplate: related,
		}
	} else {
		o.R.TemplateSettingURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateSettingURLDeviceTemplates: DeviceTemplateSlice{o},
		}
	} else {
		related.R.TemplateSettingURLDeviceTemplates = append(related.R.TemplateSettingURLDeviceTemplates, o)
	}

	return nil
}

// DeviceTemplates retrieves all the records using an executor.
func DeviceTemplates(mods ...qm.QueryMod) deviceTemplateQuery {
	mods = append(mods, qm.From("\"vehicle_signal_decoding_api\".\"device_template\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_signal_decoding_api\".\"device_template\".*"})
	}

	return deviceTemplateQuery{q}
}

// FindDeviceTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceTemplate(ctx context.Context, exec boil.ContextExecutor, vin string, selectCols ...string) (*DeviceTemplate, error) {
	deviceTemplateObj := &DeviceTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_signal_decoding_api\".\"device_template\" where \"vin\"=$1", sel,
	)

	q := queries.Raw(query, vin)

	err := q.Bind(ctx, exec, deviceTemplateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_template")
	}

	if err = deviceTemplateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceTemplateObj, err
	}

	return deviceTemplateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_template provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceTemplateInsertCacheMut.RLock()
	cache, cached := deviceTemplateInsertCache[key]
	deviceTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceTemplateAllColumns,
			deviceTemplateColumnsWithDefault,
			deviceTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceTemplateType, deviceTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceTemplateType, deviceTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_signal_decoding_api\".\"device_template\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_signal_decoding_api\".\"device_template\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_template")
	}

	if !cached {
		deviceTemplateInsertCacheMut.Lock()
		deviceTemplateInsertCache[key] = cache
		deviceTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceTemplateUpdateCacheMut.RLock()
	cache, cached := deviceTemplateUpdateCache[key]
	deviceTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceTemplateAllColumns,
			deviceTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_template, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"device_template\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deviceTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceTemplateType, deviceTemplateMapping, append(wl, deviceTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_template row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_template")
	}

	if !cached {
		deviceTemplateUpdateCacheMut.Lock()
		deviceTemplateUpdateCache[key] = cache
		deviceTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_template")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deviceTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceTemplate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_template provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceTemplateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceTemplateUpsertCacheMut.RLock()
	cache, cached := deviceTemplateUpsertCache[key]
	deviceTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceTemplateAllColumns,
			deviceTemplateColumnsWithDefault,
			deviceTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceTemplateAllColumns,
			deviceTemplatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert device_template, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deviceTemplatePrimaryKeyColumns))
			copy(conflict, deviceTemplatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_signal_decoding_api\".\"device_template\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deviceTemplateType, deviceTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceTemplateType, deviceTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert device_template")
	}

	if !cached {
		deviceTemplateUpsertCacheMut.Lock()
		deviceTemplateUpsertCache[key] = cache
		deviceTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceTemplatePrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"device_template\" WHERE \"vin\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_template")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_template")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"device_template\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_template")
	}

	if len(deviceTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceTemplate(ctx, exec, o.Vin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_signal_decoding_api\".\"device_template\".* FROM \"vehicle_signal_decoding_api\".\"device_template\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceTemplateSlice")
	}

	*o = slice

	return nil
}

// DeviceTemplateExists checks if the DeviceTemplate row exists.
func DeviceTemplateExists(ctx context.Context, exec boil.ContextExecutor, vin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_signal_decoding_api\".\"device_template\" where \"vin\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vin)
	}
	row := exec.QueryRowContext(ctx, sql, vin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_template exists")
	}

	return exists, nil
}
