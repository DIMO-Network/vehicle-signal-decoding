// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TemplateVehicle is an object representing the database table.
type TemplateVehicle struct {
	MakeSlug       null.String       `boil:"make_slug" json:"make_slug,omitempty" toml:"make_slug" yaml:"make_slug,omitempty"`
	TemplateName   string            `boil:"template_name" json:"template_name" toml:"template_name" yaml:"template_name"`
	YearStart      int               `boil:"year_start" json:"year_start" toml:"year_start" yaml:"year_start"`
	YearEnd        int               `boil:"year_end" json:"year_end" toml:"year_end" yaml:"year_end"`
	ModelWhitelist types.StringArray `boil:"model_whitelist" json:"model_whitelist,omitempty" toml:"model_whitelist" yaml:"model_whitelist,omitempty"`
	CreatedAt      time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ID             int               `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *templateVehicleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L templateVehicleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplateVehicleColumns = struct {
	MakeSlug       string
	TemplateName   string
	YearStart      string
	YearEnd        string
	ModelWhitelist string
	CreatedAt      string
	UpdatedAt      string
	ID             string
}{
	MakeSlug:       "make_slug",
	TemplateName:   "template_name",
	YearStart:      "year_start",
	YearEnd:        "year_end",
	ModelWhitelist: "model_whitelist",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	ID:             "id",
}

var TemplateVehicleTableColumns = struct {
	MakeSlug       string
	TemplateName   string
	YearStart      string
	YearEnd        string
	ModelWhitelist string
	CreatedAt      string
	UpdatedAt      string
	ID             string
}{
	MakeSlug:       "template_vehicles.make_slug",
	TemplateName:   "template_vehicles.template_name",
	YearStart:      "template_vehicles.year_start",
	YearEnd:        "template_vehicles.year_end",
	ModelWhitelist: "template_vehicles.model_whitelist",
	CreatedAt:      "template_vehicles.created_at",
	UpdatedAt:      "template_vehicles.updated_at",
	ID:             "template_vehicles.id",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var TemplateVehicleWhere = struct {
	MakeSlug       whereHelpernull_String
	TemplateName   whereHelperstring
	YearStart      whereHelperint
	YearEnd        whereHelperint
	ModelWhitelist whereHelpertypes_StringArray
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	ID             whereHelperint
}{
	MakeSlug:       whereHelpernull_String{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"make_slug\""},
	TemplateName:   whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"template_name\""},
	YearStart:      whereHelperint{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"year_start\""},
	YearEnd:        whereHelperint{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"year_end\""},
	ModelWhitelist: whereHelpertypes_StringArray{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"model_whitelist\""},
	CreatedAt:      whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"updated_at\""},
	ID:             whereHelperint{field: "\"vehicle_signal_decoding_api\".\"template_vehicles\".\"id\""},
}

// TemplateVehicleRels is where relationship names are stored.
var TemplateVehicleRels = struct {
	TemplateNameTemplate string
}{
	TemplateNameTemplate: "TemplateNameTemplate",
}

// templateVehicleR is where relationships are stored.
type templateVehicleR struct {
	TemplateNameTemplate *Template `boil:"TemplateNameTemplate" json:"TemplateNameTemplate" toml:"TemplateNameTemplate" yaml:"TemplateNameTemplate"`
}

// NewStruct creates a new relationship struct
func (*templateVehicleR) NewStruct() *templateVehicleR {
	return &templateVehicleR{}
}

func (r *templateVehicleR) GetTemplateNameTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateNameTemplate
}

// templateVehicleL is where Load methods for each relationship are stored.
type templateVehicleL struct{}

var (
	templateVehicleAllColumns            = []string{"make_slug", "template_name", "year_start", "year_end", "model_whitelist", "created_at", "updated_at", "id"}
	templateVehicleColumnsWithoutDefault = []string{"template_name", "year_start", "year_end"}
	templateVehicleColumnsWithDefault    = []string{"make_slug", "model_whitelist", "created_at", "updated_at", "id"}
	templateVehiclePrimaryKeyColumns     = []string{"id"}
	templateVehicleGeneratedColumns      = []string{}
)

type (
	// TemplateVehicleSlice is an alias for a slice of pointers to TemplateVehicle.
	// This should almost always be used instead of []TemplateVehicle.
	TemplateVehicleSlice []*TemplateVehicle
	// TemplateVehicleHook is the signature for custom TemplateVehicle hook methods
	TemplateVehicleHook func(context.Context, boil.ContextExecutor, *TemplateVehicle) error

	templateVehicleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templateVehicleType                 = reflect.TypeOf(&TemplateVehicle{})
	templateVehicleMapping              = queries.MakeStructMapping(templateVehicleType)
	templateVehiclePrimaryKeyMapping, _ = queries.BindMapping(templateVehicleType, templateVehicleMapping, templateVehiclePrimaryKeyColumns)
	templateVehicleInsertCacheMut       sync.RWMutex
	templateVehicleInsertCache          = make(map[string]insertCache)
	templateVehicleUpdateCacheMut       sync.RWMutex
	templateVehicleUpdateCache          = make(map[string]updateCache)
	templateVehicleUpsertCacheMut       sync.RWMutex
	templateVehicleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var templateVehicleAfterSelectHooks []TemplateVehicleHook

var templateVehicleBeforeInsertHooks []TemplateVehicleHook
var templateVehicleAfterInsertHooks []TemplateVehicleHook

var templateVehicleBeforeUpdateHooks []TemplateVehicleHook
var templateVehicleAfterUpdateHooks []TemplateVehicleHook

var templateVehicleBeforeDeleteHooks []TemplateVehicleHook
var templateVehicleAfterDeleteHooks []TemplateVehicleHook

var templateVehicleBeforeUpsertHooks []TemplateVehicleHook
var templateVehicleAfterUpsertHooks []TemplateVehicleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TemplateVehicle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TemplateVehicle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TemplateVehicle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TemplateVehicle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TemplateVehicle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TemplateVehicle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TemplateVehicle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TemplateVehicle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TemplateVehicle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateVehicleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTemplateVehicleHook registers your hook function for all future operations.
func AddTemplateVehicleHook(hookPoint boil.HookPoint, templateVehicleHook TemplateVehicleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		templateVehicleAfterSelectHooks = append(templateVehicleAfterSelectHooks, templateVehicleHook)
	case boil.BeforeInsertHook:
		templateVehicleBeforeInsertHooks = append(templateVehicleBeforeInsertHooks, templateVehicleHook)
	case boil.AfterInsertHook:
		templateVehicleAfterInsertHooks = append(templateVehicleAfterInsertHooks, templateVehicleHook)
	case boil.BeforeUpdateHook:
		templateVehicleBeforeUpdateHooks = append(templateVehicleBeforeUpdateHooks, templateVehicleHook)
	case boil.AfterUpdateHook:
		templateVehicleAfterUpdateHooks = append(templateVehicleAfterUpdateHooks, templateVehicleHook)
	case boil.BeforeDeleteHook:
		templateVehicleBeforeDeleteHooks = append(templateVehicleBeforeDeleteHooks, templateVehicleHook)
	case boil.AfterDeleteHook:
		templateVehicleAfterDeleteHooks = append(templateVehicleAfterDeleteHooks, templateVehicleHook)
	case boil.BeforeUpsertHook:
		templateVehicleBeforeUpsertHooks = append(templateVehicleBeforeUpsertHooks, templateVehicleHook)
	case boil.AfterUpsertHook:
		templateVehicleAfterUpsertHooks = append(templateVehicleAfterUpsertHooks, templateVehicleHook)
	}
}

// One returns a single templateVehicle record from the query.
func (q templateVehicleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TemplateVehicle, error) {
	o := &TemplateVehicle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for template_vehicles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TemplateVehicle records from the query.
func (q templateVehicleQuery) All(ctx context.Context, exec boil.ContextExecutor) (TemplateVehicleSlice, error) {
	var o []*TemplateVehicle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TemplateVehicle slice")
	}

	if len(templateVehicleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TemplateVehicle records in the query.
func (q templateVehicleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count template_vehicles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q templateVehicleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if template_vehicles exists")
	}

	return count > 0, nil
}

// TemplateNameTemplate pointed to by the foreign key.
func (o *TemplateVehicle) TemplateNameTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateName),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// LoadTemplateNameTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (templateVehicleL) LoadTemplateNameTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplateVehicle interface{}, mods queries.Applicator) error {
	var slice []*TemplateVehicle
	var object *TemplateVehicle

	if singular {
		var ok bool
		object, ok = maybeTemplateVehicle.(*TemplateVehicle)
		if !ok {
			object = new(TemplateVehicle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplateVehicle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplateVehicle))
			}
		}
	} else {
		s, ok := maybeTemplateVehicle.(*[]*TemplateVehicle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplateVehicle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplateVehicle))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateVehicleR{}
		}
		args = append(args, object.TemplateName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateVehicleR{}
			}

			for _, a := range args {
				if a == obj.TemplateName {
					continue Outer
				}
			}

			args = append(args, obj.TemplateName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(templateVehicleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateNameTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateNameTemplateVehicles = append(foreign.R.TemplateNameTemplateVehicles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateName == foreign.TemplateName {
				local.R.TemplateNameTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateNameTemplateVehicles = append(foreign.R.TemplateNameTemplateVehicles, local)
				break
			}
		}
	}

	return nil
}

// SetTemplateNameTemplate of the templateVehicle to the related item.
// Sets o.R.TemplateNameTemplate to related.
// Adds o to related.R.TemplateNameTemplateVehicles.
func (o *TemplateVehicle) SetTemplateNameTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"template_vehicles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_name"}),
		strmangle.WhereClause("\"", "\"", 2, templateVehiclePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateName = related.TemplateName
	if o.R == nil {
		o.R = &templateVehicleR{
			TemplateNameTemplate: related,
		}
	} else {
		o.R.TemplateNameTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateNameTemplateVehicles: TemplateVehicleSlice{o},
		}
	} else {
		related.R.TemplateNameTemplateVehicles = append(related.R.TemplateNameTemplateVehicles, o)
	}

	return nil
}

// TemplateVehicles retrieves all the records using an executor.
func TemplateVehicles(mods ...qm.QueryMod) templateVehicleQuery {
	mods = append(mods, qm.From("\"vehicle_signal_decoding_api\".\"template_vehicles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_signal_decoding_api\".\"template_vehicles\".*"})
	}

	return templateVehicleQuery{q}
}

// FindTemplateVehicle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplateVehicle(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TemplateVehicle, error) {
	templateVehicleObj := &TemplateVehicle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_signal_decoding_api\".\"template_vehicles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, templateVehicleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from template_vehicles")
	}

	if err = templateVehicleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return templateVehicleObj, err
	}

	return templateVehicleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TemplateVehicle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_vehicles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateVehicleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templateVehicleInsertCacheMut.RLock()
	cache, cached := templateVehicleInsertCache[key]
	templateVehicleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templateVehicleAllColumns,
			templateVehicleColumnsWithDefault,
			templateVehicleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templateVehicleType, templateVehicleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templateVehicleType, templateVehicleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_signal_decoding_api\".\"template_vehicles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_signal_decoding_api\".\"template_vehicles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into template_vehicles")
	}

	if !cached {
		templateVehicleInsertCacheMut.Lock()
		templateVehicleInsertCache[key] = cache
		templateVehicleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TemplateVehicle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TemplateVehicle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	templateVehicleUpdateCacheMut.RLock()
	cache, cached := templateVehicleUpdateCache[key]
	templateVehicleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templateVehicleAllColumns,
			templateVehiclePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update template_vehicles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"template_vehicles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, templateVehiclePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templateVehicleType, templateVehicleMapping, append(wl, templateVehiclePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update template_vehicles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for template_vehicles")
	}

	if !cached {
		templateVehicleUpdateCacheMut.Lock()
		templateVehicleUpdateCache[key] = cache
		templateVehicleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q templateVehicleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for template_vehicles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for template_vehicles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplateVehicleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateVehiclePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"template_vehicles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, templateVehiclePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in templateVehicle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all templateVehicle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TemplateVehicle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_vehicles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateVehicleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templateVehicleUpsertCacheMut.RLock()
	cache, cached := templateVehicleUpsertCache[key]
	templateVehicleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			templateVehicleAllColumns,
			templateVehicleColumnsWithDefault,
			templateVehicleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			templateVehicleAllColumns,
			templateVehiclePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert template_vehicles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(templateVehiclePrimaryKeyColumns))
			copy(conflict, templateVehiclePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_signal_decoding_api\".\"template_vehicles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(templateVehicleType, templateVehicleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templateVehicleType, templateVehicleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert template_vehicles")
	}

	if !cached {
		templateVehicleUpsertCacheMut.Lock()
		templateVehicleUpsertCache[key] = cache
		templateVehicleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TemplateVehicle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TemplateVehicle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TemplateVehicle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templateVehiclePrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"template_vehicles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from template_vehicles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for template_vehicles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templateVehicleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no templateVehicleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from template_vehicles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_vehicles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplateVehicleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(templateVehicleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateVehiclePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"template_vehicles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateVehiclePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from templateVehicle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_vehicles")
	}

	if len(templateVehicleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TemplateVehicle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTemplateVehicle(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplateVehicleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplateVehicleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateVehiclePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_signal_decoding_api\".\"template_vehicles\".* FROM \"vehicle_signal_decoding_api\".\"template_vehicles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateVehiclePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TemplateVehicleSlice")
	}

	*o = slice

	return nil
}

// TemplateVehicleExists checks if the TemplateVehicle row exists.
func TemplateVehicleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_signal_decoding_api\".\"template_vehicles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if template_vehicles exists")
	}

	return exists, nil
}
