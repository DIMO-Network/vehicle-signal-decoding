// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserDeviceTemplate is an object representing the database table.
type UserDeviceTemplate struct {
	DeviceEthereumAddress []byte    `boil:"device_ethereum_address" json:"device_ethereum_address" toml:"device_ethereum_address" yaml:"device_ethereum_address"`
	TemplateDBCURL        string    `boil:"template_dbc_url" json:"template_dbc_url" toml:"template_dbc_url" yaml:"template_dbc_url"`
	TemplatePidURL        string    `boil:"template_pid_url" json:"template_pid_url" toml:"template_pid_url" yaml:"template_pid_url"`
	TemplateSettingURL    string    `boil:"template_setting_url" json:"template_setting_url" toml:"template_setting_url" yaml:"template_setting_url"`
	Version               string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userDeviceTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userDeviceTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserDeviceTemplateColumns = struct {
	DeviceEthereumAddress string
	TemplateDBCURL        string
	TemplatePidURL        string
	TemplateSettingURL    string
	Version               string
	CreatedAt             string
	UpdatedAt             string
}{
	DeviceEthereumAddress: "device_ethereum_address",
	TemplateDBCURL:        "template_dbc_url",
	TemplatePidURL:        "template_pid_url",
	TemplateSettingURL:    "template_setting_url",
	Version:               "version",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var UserDeviceTemplateTableColumns = struct {
	DeviceEthereumAddress string
	TemplateDBCURL        string
	TemplatePidURL        string
	TemplateSettingURL    string
	Version               string
	CreatedAt             string
	UpdatedAt             string
}{
	DeviceEthereumAddress: "user_device_template.device_ethereum_address",
	TemplateDBCURL:        "user_device_template.template_dbc_url",
	TemplatePidURL:        "user_device_template.template_pid_url",
	TemplateSettingURL:    "user_device_template.template_setting_url",
	Version:               "user_device_template.version",
	CreatedAt:             "user_device_template.created_at",
	UpdatedAt:             "user_device_template.updated_at",
}

// Generated where

var UserDeviceTemplateWhere = struct {
	DeviceEthereumAddress whereHelper__byte
	TemplateDBCURL        whereHelperstring
	TemplatePidURL        whereHelperstring
	TemplateSettingURL    whereHelperstring
	Version               whereHelperstring
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	DeviceEthereumAddress: whereHelper__byte{field: "\"vehicle_signal_decoding_api\".\"user_device_template\".\"device_ethereum_address\""},
	TemplateDBCURL:        whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"user_device_template\".\"template_dbc_url\""},
	TemplatePidURL:        whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"user_device_template\".\"template_pid_url\""},
	TemplateSettingURL:    whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"user_device_template\".\"template_setting_url\""},
	Version:               whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"user_device_template\".\"version\""},
	CreatedAt:             whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"user_device_template\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"user_device_template\".\"updated_at\""},
}

// UserDeviceTemplateRels is where relationship names are stored.
var UserDeviceTemplateRels = struct {
	TemplateDBCURLTemplate     string
	TemplatePidURLTemplate     string
	TemplateSettingURLTemplate string
}{
	TemplateDBCURLTemplate:     "TemplateDBCURLTemplate",
	TemplatePidURLTemplate:     "TemplatePidURLTemplate",
	TemplateSettingURLTemplate: "TemplateSettingURLTemplate",
}

// userDeviceTemplateR is where relationships are stored.
type userDeviceTemplateR struct {
	TemplateDBCURLTemplate     *Template `boil:"TemplateDBCURLTemplate" json:"TemplateDBCURLTemplate" toml:"TemplateDBCURLTemplate" yaml:"TemplateDBCURLTemplate"`
	TemplatePidURLTemplate     *Template `boil:"TemplatePidURLTemplate" json:"TemplatePidURLTemplate" toml:"TemplatePidURLTemplate" yaml:"TemplatePidURLTemplate"`
	TemplateSettingURLTemplate *Template `boil:"TemplateSettingURLTemplate" json:"TemplateSettingURLTemplate" toml:"TemplateSettingURLTemplate" yaml:"TemplateSettingURLTemplate"`
}

// NewStruct creates a new relationship struct
func (*userDeviceTemplateR) NewStruct() *userDeviceTemplateR {
	return &userDeviceTemplateR{}
}

func (r *userDeviceTemplateR) GetTemplateDBCURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateDBCURLTemplate
}

func (r *userDeviceTemplateR) GetTemplatePidURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplatePidURLTemplate
}

func (r *userDeviceTemplateR) GetTemplateSettingURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateSettingURLTemplate
}

// userDeviceTemplateL is where Load methods for each relationship are stored.
type userDeviceTemplateL struct{}

var (
	userDeviceTemplateAllColumns            = []string{"device_ethereum_address", "template_dbc_url", "template_pid_url", "template_setting_url", "version", "created_at", "updated_at"}
	userDeviceTemplateColumnsWithoutDefault = []string{"device_ethereum_address", "template_dbc_url", "template_pid_url", "template_setting_url", "version"}
	userDeviceTemplateColumnsWithDefault    = []string{"created_at", "updated_at"}
	userDeviceTemplatePrimaryKeyColumns     = []string{"device_ethereum_address"}
	userDeviceTemplateGeneratedColumns      = []string{}
)

type (
	// UserDeviceTemplateSlice is an alias for a slice of pointers to UserDeviceTemplate.
	// This should almost always be used instead of []UserDeviceTemplate.
	UserDeviceTemplateSlice []*UserDeviceTemplate
	// UserDeviceTemplateHook is the signature for custom UserDeviceTemplate hook methods
	UserDeviceTemplateHook func(context.Context, boil.ContextExecutor, *UserDeviceTemplate) error

	userDeviceTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userDeviceTemplateType                 = reflect.TypeOf(&UserDeviceTemplate{})
	userDeviceTemplateMapping              = queries.MakeStructMapping(userDeviceTemplateType)
	userDeviceTemplatePrimaryKeyMapping, _ = queries.BindMapping(userDeviceTemplateType, userDeviceTemplateMapping, userDeviceTemplatePrimaryKeyColumns)
	userDeviceTemplateInsertCacheMut       sync.RWMutex
	userDeviceTemplateInsertCache          = make(map[string]insertCache)
	userDeviceTemplateUpdateCacheMut       sync.RWMutex
	userDeviceTemplateUpdateCache          = make(map[string]updateCache)
	userDeviceTemplateUpsertCacheMut       sync.RWMutex
	userDeviceTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userDeviceTemplateAfterSelectHooks []UserDeviceTemplateHook

var userDeviceTemplateBeforeInsertHooks []UserDeviceTemplateHook
var userDeviceTemplateAfterInsertHooks []UserDeviceTemplateHook

var userDeviceTemplateBeforeUpdateHooks []UserDeviceTemplateHook
var userDeviceTemplateAfterUpdateHooks []UserDeviceTemplateHook

var userDeviceTemplateBeforeDeleteHooks []UserDeviceTemplateHook
var userDeviceTemplateAfterDeleteHooks []UserDeviceTemplateHook

var userDeviceTemplateBeforeUpsertHooks []UserDeviceTemplateHook
var userDeviceTemplateAfterUpsertHooks []UserDeviceTemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserDeviceTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserDeviceTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserDeviceTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserDeviceTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserDeviceTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserDeviceTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserDeviceTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserDeviceTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserDeviceTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserDeviceTemplateHook registers your hook function for all future operations.
func AddUserDeviceTemplateHook(hookPoint boil.HookPoint, userDeviceTemplateHook UserDeviceTemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userDeviceTemplateAfterSelectHooks = append(userDeviceTemplateAfterSelectHooks, userDeviceTemplateHook)
	case boil.BeforeInsertHook:
		userDeviceTemplateBeforeInsertHooks = append(userDeviceTemplateBeforeInsertHooks, userDeviceTemplateHook)
	case boil.AfterInsertHook:
		userDeviceTemplateAfterInsertHooks = append(userDeviceTemplateAfterInsertHooks, userDeviceTemplateHook)
	case boil.BeforeUpdateHook:
		userDeviceTemplateBeforeUpdateHooks = append(userDeviceTemplateBeforeUpdateHooks, userDeviceTemplateHook)
	case boil.AfterUpdateHook:
		userDeviceTemplateAfterUpdateHooks = append(userDeviceTemplateAfterUpdateHooks, userDeviceTemplateHook)
	case boil.BeforeDeleteHook:
		userDeviceTemplateBeforeDeleteHooks = append(userDeviceTemplateBeforeDeleteHooks, userDeviceTemplateHook)
	case boil.AfterDeleteHook:
		userDeviceTemplateAfterDeleteHooks = append(userDeviceTemplateAfterDeleteHooks, userDeviceTemplateHook)
	case boil.BeforeUpsertHook:
		userDeviceTemplateBeforeUpsertHooks = append(userDeviceTemplateBeforeUpsertHooks, userDeviceTemplateHook)
	case boil.AfterUpsertHook:
		userDeviceTemplateAfterUpsertHooks = append(userDeviceTemplateAfterUpsertHooks, userDeviceTemplateHook)
	}
}

// One returns a single userDeviceTemplate record from the query.
func (q userDeviceTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserDeviceTemplate, error) {
	o := &UserDeviceTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_device_template")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserDeviceTemplate records from the query.
func (q userDeviceTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserDeviceTemplateSlice, error) {
	var o []*UserDeviceTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserDeviceTemplate slice")
	}

	if len(userDeviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserDeviceTemplate records in the query.
func (q userDeviceTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_device_template rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userDeviceTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_device_template exists")
	}

	return count > 0, nil
}

// TemplateDBCURLTemplate pointed to by the foreign key.
func (o *UserDeviceTemplate) TemplateDBCURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateDBCURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// TemplatePidURLTemplate pointed to by the foreign key.
func (o *UserDeviceTemplate) TemplatePidURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplatePidURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// TemplateSettingURLTemplate pointed to by the foreign key.
func (o *UserDeviceTemplate) TemplateSettingURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateSettingURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// LoadTemplateDBCURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userDeviceTemplateL) LoadTemplateDBCURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDeviceTemplate interface{}, mods queries.Applicator) error {
	var slice []*UserDeviceTemplate
	var object *UserDeviceTemplate

	if singular {
		var ok bool
		object, ok = maybeUserDeviceTemplate.(*UserDeviceTemplate)
		if !ok {
			object = new(UserDeviceTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDeviceTemplate))
			}
		}
	} else {
		s, ok := maybeUserDeviceTemplate.(*[]*UserDeviceTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDeviceTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDeviceTemplateR{}
		}
		args = append(args, object.TemplateDBCURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDeviceTemplateR{}
			}

			for _, a := range args {
				if a == obj.TemplateDBCURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplateDBCURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(userDeviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateDBCURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateDBCURLUserDeviceTemplates = append(foreign.R.TemplateDBCURLUserDeviceTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateDBCURL == foreign.TemplateName {
				local.R.TemplateDBCURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateDBCURLUserDeviceTemplates = append(foreign.R.TemplateDBCURLUserDeviceTemplates, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplatePidURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userDeviceTemplateL) LoadTemplatePidURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDeviceTemplate interface{}, mods queries.Applicator) error {
	var slice []*UserDeviceTemplate
	var object *UserDeviceTemplate

	if singular {
		var ok bool
		object, ok = maybeUserDeviceTemplate.(*UserDeviceTemplate)
		if !ok {
			object = new(UserDeviceTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDeviceTemplate))
			}
		}
	} else {
		s, ok := maybeUserDeviceTemplate.(*[]*UserDeviceTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDeviceTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDeviceTemplateR{}
		}
		args = append(args, object.TemplatePidURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDeviceTemplateR{}
			}

			for _, a := range args {
				if a == obj.TemplatePidURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplatePidURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(userDeviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplatePidURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplatePidURLUserDeviceTemplates = append(foreign.R.TemplatePidURLUserDeviceTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplatePidURL == foreign.TemplateName {
				local.R.TemplatePidURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplatePidURLUserDeviceTemplates = append(foreign.R.TemplatePidURLUserDeviceTemplates, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplateSettingURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userDeviceTemplateL) LoadTemplateSettingURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDeviceTemplate interface{}, mods queries.Applicator) error {
	var slice []*UserDeviceTemplate
	var object *UserDeviceTemplate

	if singular {
		var ok bool
		object, ok = maybeUserDeviceTemplate.(*UserDeviceTemplate)
		if !ok {
			object = new(UserDeviceTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDeviceTemplate))
			}
		}
	} else {
		s, ok := maybeUserDeviceTemplate.(*[]*UserDeviceTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDeviceTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDeviceTemplate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDeviceTemplateR{}
		}
		args = append(args, object.TemplateSettingURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDeviceTemplateR{}
			}

			for _, a := range args {
				if a == obj.TemplateSettingURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplateSettingURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(userDeviceTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateSettingURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateSettingURLUserDeviceTemplates = append(foreign.R.TemplateSettingURLUserDeviceTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateSettingURL == foreign.TemplateName {
				local.R.TemplateSettingURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateSettingURLUserDeviceTemplates = append(foreign.R.TemplateSettingURLUserDeviceTemplates, local)
				break
			}
		}
	}

	return nil
}

// SetTemplateDBCURLTemplate of the userDeviceTemplate to the related item.
// Sets o.R.TemplateDBCURLTemplate to related.
// Adds o to related.R.TemplateDBCURLUserDeviceTemplates.
func (o *UserDeviceTemplate) SetTemplateDBCURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"user_device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_dbc_url"}),
		strmangle.WhereClause("\"", "\"", 2, userDeviceTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.DeviceEthereumAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateDBCURL = related.TemplateName
	if o.R == nil {
		o.R = &userDeviceTemplateR{
			TemplateDBCURLTemplate: related,
		}
	} else {
		o.R.TemplateDBCURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateDBCURLUserDeviceTemplates: UserDeviceTemplateSlice{o},
		}
	} else {
		related.R.TemplateDBCURLUserDeviceTemplates = append(related.R.TemplateDBCURLUserDeviceTemplates, o)
	}

	return nil
}

// SetTemplatePidURLTemplate of the userDeviceTemplate to the related item.
// Sets o.R.TemplatePidURLTemplate to related.
// Adds o to related.R.TemplatePidURLUserDeviceTemplates.
func (o *UserDeviceTemplate) SetTemplatePidURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"user_device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_pid_url"}),
		strmangle.WhereClause("\"", "\"", 2, userDeviceTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.DeviceEthereumAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplatePidURL = related.TemplateName
	if o.R == nil {
		o.R = &userDeviceTemplateR{
			TemplatePidURLTemplate: related,
		}
	} else {
		o.R.TemplatePidURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplatePidURLUserDeviceTemplates: UserDeviceTemplateSlice{o},
		}
	} else {
		related.R.TemplatePidURLUserDeviceTemplates = append(related.R.TemplatePidURLUserDeviceTemplates, o)
	}

	return nil
}

// SetTemplateSettingURLTemplate of the userDeviceTemplate to the related item.
// Sets o.R.TemplateSettingURLTemplate to related.
// Adds o to related.R.TemplateSettingURLUserDeviceTemplates.
func (o *UserDeviceTemplate) SetTemplateSettingURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"user_device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_setting_url"}),
		strmangle.WhereClause("\"", "\"", 2, userDeviceTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.DeviceEthereumAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateSettingURL = related.TemplateName
	if o.R == nil {
		o.R = &userDeviceTemplateR{
			TemplateSettingURLTemplate: related,
		}
	} else {
		o.R.TemplateSettingURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateSettingURLUserDeviceTemplates: UserDeviceTemplateSlice{o},
		}
	} else {
		related.R.TemplateSettingURLUserDeviceTemplates = append(related.R.TemplateSettingURLUserDeviceTemplates, o)
	}

	return nil
}

// UserDeviceTemplates retrieves all the records using an executor.
func UserDeviceTemplates(mods ...qm.QueryMod) userDeviceTemplateQuery {
	mods = append(mods, qm.From("\"vehicle_signal_decoding_api\".\"user_device_template\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_signal_decoding_api\".\"user_device_template\".*"})
	}

	return userDeviceTemplateQuery{q}
}

// FindUserDeviceTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserDeviceTemplate(ctx context.Context, exec boil.ContextExecutor, deviceEthereumAddress []byte, selectCols ...string) (*UserDeviceTemplate, error) {
	userDeviceTemplateObj := &UserDeviceTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_signal_decoding_api\".\"user_device_template\" where \"device_ethereum_address\"=$1", sel,
	)

	q := queries.Raw(query, deviceEthereumAddress)

	err := q.Bind(ctx, exec, userDeviceTemplateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_device_template")
	}

	if err = userDeviceTemplateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userDeviceTemplateObj, err
	}

	return userDeviceTemplateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserDeviceTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_device_template provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDeviceTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userDeviceTemplateInsertCacheMut.RLock()
	cache, cached := userDeviceTemplateInsertCache[key]
	userDeviceTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userDeviceTemplateAllColumns,
			userDeviceTemplateColumnsWithDefault,
			userDeviceTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userDeviceTemplateType, userDeviceTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userDeviceTemplateType, userDeviceTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_signal_decoding_api\".\"user_device_template\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_signal_decoding_api\".\"user_device_template\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_device_template")
	}

	if !cached {
		userDeviceTemplateInsertCacheMut.Lock()
		userDeviceTemplateInsertCache[key] = cache
		userDeviceTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserDeviceTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserDeviceTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userDeviceTemplateUpdateCacheMut.RLock()
	cache, cached := userDeviceTemplateUpdateCache[key]
	userDeviceTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userDeviceTemplateAllColumns,
			userDeviceTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_device_template, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"user_device_template\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userDeviceTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userDeviceTemplateType, userDeviceTemplateMapping, append(wl, userDeviceTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_device_template row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_device_template")
	}

	if !cached {
		userDeviceTemplateUpdateCacheMut.Lock()
		userDeviceTemplateUpdateCache[key] = cache
		userDeviceTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userDeviceTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_device_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_device_template")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserDeviceTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDeviceTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"user_device_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userDeviceTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userDeviceTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userDeviceTemplate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserDeviceTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_device_template provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDeviceTemplateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userDeviceTemplateUpsertCacheMut.RLock()
	cache, cached := userDeviceTemplateUpsertCache[key]
	userDeviceTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userDeviceTemplateAllColumns,
			userDeviceTemplateColumnsWithDefault,
			userDeviceTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userDeviceTemplateAllColumns,
			userDeviceTemplatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_device_template, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userDeviceTemplatePrimaryKeyColumns))
			copy(conflict, userDeviceTemplatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_signal_decoding_api\".\"user_device_template\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userDeviceTemplateType, userDeviceTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userDeviceTemplateType, userDeviceTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_device_template")
	}

	if !cached {
		userDeviceTemplateUpsertCacheMut.Lock()
		userDeviceTemplateUpsertCache[key] = cache
		userDeviceTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserDeviceTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserDeviceTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserDeviceTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userDeviceTemplatePrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"user_device_template\" WHERE \"device_ethereum_address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_device_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_device_template")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userDeviceTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userDeviceTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_device_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_device_template")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserDeviceTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userDeviceTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDeviceTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"user_device_template\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDeviceTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userDeviceTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_device_template")
	}

	if len(userDeviceTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserDeviceTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserDeviceTemplate(ctx, exec, o.DeviceEthereumAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserDeviceTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserDeviceTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDeviceTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_signal_decoding_api\".\"user_device_template\".* FROM \"vehicle_signal_decoding_api\".\"user_device_template\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDeviceTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserDeviceTemplateSlice")
	}

	*o = slice

	return nil
}

// UserDeviceTemplateExists checks if the UserDeviceTemplate row exists.
func UserDeviceTemplateExists(ctx context.Context, exec boil.ContextExecutor, deviceEthereumAddress []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_signal_decoding_api\".\"user_device_template\" where \"device_ethereum_address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deviceEthereumAddress)
	}
	row := exec.QueryRowContext(ctx, sql, deviceEthereumAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_device_template exists")
	}

	return exists, nil
}
