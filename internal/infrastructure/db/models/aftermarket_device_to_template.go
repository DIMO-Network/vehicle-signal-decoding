// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AftermarketDeviceToTemplate is an object representing the database table.
type AftermarketDeviceToTemplate struct {
	AftermarketDeviceEthereumAddress []byte    `boil:"aftermarket_device_ethereum_address" json:"aftermarket_device_ethereum_address" toml:"aftermarket_device_ethereum_address" yaml:"aftermarket_device_ethereum_address"`
	TemplateName                     string    `boil:"template_name" json:"template_name" toml:"template_name" yaml:"template_name"`
	CreatedAt                        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *aftermarketDeviceToTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aftermarketDeviceToTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AftermarketDeviceToTemplateColumns = struct {
	AftermarketDeviceEthereumAddress string
	TemplateName                     string
	CreatedAt                        string
	UpdatedAt                        string
}{
	AftermarketDeviceEthereumAddress: "aftermarket_device_ethereum_address",
	TemplateName:                     "template_name",
	CreatedAt:                        "created_at",
	UpdatedAt:                        "updated_at",
}

var AftermarketDeviceToTemplateTableColumns = struct {
	AftermarketDeviceEthereumAddress string
	TemplateName                     string
	CreatedAt                        string
	UpdatedAt                        string
}{
	AftermarketDeviceEthereumAddress: "aftermarket_device_to_template.aftermarket_device_ethereum_address",
	TemplateName:                     "aftermarket_device_to_template.template_name",
	CreatedAt:                        "aftermarket_device_to_template.created_at",
	UpdatedAt:                        "aftermarket_device_to_template.updated_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AftermarketDeviceToTemplateWhere = struct {
	AftermarketDeviceEthereumAddress whereHelper__byte
	TemplateName                     whereHelperstring
	CreatedAt                        whereHelpertime_Time
	UpdatedAt                        whereHelpertime_Time
}{
	AftermarketDeviceEthereumAddress: whereHelper__byte{field: "\"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\".\"aftermarket_device_ethereum_address\""},
	TemplateName:                     whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\".\"template_name\""},
	CreatedAt:                        whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\".\"created_at\""},
	UpdatedAt:                        whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\".\"updated_at\""},
}

// AftermarketDeviceToTemplateRels is where relationship names are stored.
var AftermarketDeviceToTemplateRels = struct {
	TemplateNameTemplate string
}{
	TemplateNameTemplate: "TemplateNameTemplate",
}

// aftermarketDeviceToTemplateR is where relationships are stored.
type aftermarketDeviceToTemplateR struct {
	TemplateNameTemplate *Template `boil:"TemplateNameTemplate" json:"TemplateNameTemplate" toml:"TemplateNameTemplate" yaml:"TemplateNameTemplate"`
}

// NewStruct creates a new relationship struct
func (*aftermarketDeviceToTemplateR) NewStruct() *aftermarketDeviceToTemplateR {
	return &aftermarketDeviceToTemplateR{}
}

func (r *aftermarketDeviceToTemplateR) GetTemplateNameTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateNameTemplate
}

// aftermarketDeviceToTemplateL is where Load methods for each relationship are stored.
type aftermarketDeviceToTemplateL struct{}

var (
	aftermarketDeviceToTemplateAllColumns            = []string{"aftermarket_device_ethereum_address", "template_name", "created_at", "updated_at"}
	aftermarketDeviceToTemplateColumnsWithoutDefault = []string{"aftermarket_device_ethereum_address", "template_name"}
	aftermarketDeviceToTemplateColumnsWithDefault    = []string{"created_at", "updated_at"}
	aftermarketDeviceToTemplatePrimaryKeyColumns     = []string{"aftermarket_device_ethereum_address", "template_name"}
	aftermarketDeviceToTemplateGeneratedColumns      = []string{}
)

type (
	// AftermarketDeviceToTemplateSlice is an alias for a slice of pointers to AftermarketDeviceToTemplate.
	// This should almost always be used instead of []AftermarketDeviceToTemplate.
	AftermarketDeviceToTemplateSlice []*AftermarketDeviceToTemplate
	// AftermarketDeviceToTemplateHook is the signature for custom AftermarketDeviceToTemplate hook methods
	AftermarketDeviceToTemplateHook func(context.Context, boil.ContextExecutor, *AftermarketDeviceToTemplate) error

	aftermarketDeviceToTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aftermarketDeviceToTemplateType                 = reflect.TypeOf(&AftermarketDeviceToTemplate{})
	aftermarketDeviceToTemplateMapping              = queries.MakeStructMapping(aftermarketDeviceToTemplateType)
	aftermarketDeviceToTemplatePrimaryKeyMapping, _ = queries.BindMapping(aftermarketDeviceToTemplateType, aftermarketDeviceToTemplateMapping, aftermarketDeviceToTemplatePrimaryKeyColumns)
	aftermarketDeviceToTemplateInsertCacheMut       sync.RWMutex
	aftermarketDeviceToTemplateInsertCache          = make(map[string]insertCache)
	aftermarketDeviceToTemplateUpdateCacheMut       sync.RWMutex
	aftermarketDeviceToTemplateUpdateCache          = make(map[string]updateCache)
	aftermarketDeviceToTemplateUpsertCacheMut       sync.RWMutex
	aftermarketDeviceToTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aftermarketDeviceToTemplateAfterSelectMu sync.Mutex
var aftermarketDeviceToTemplateAfterSelectHooks []AftermarketDeviceToTemplateHook

var aftermarketDeviceToTemplateBeforeInsertMu sync.Mutex
var aftermarketDeviceToTemplateBeforeInsertHooks []AftermarketDeviceToTemplateHook
var aftermarketDeviceToTemplateAfterInsertMu sync.Mutex
var aftermarketDeviceToTemplateAfterInsertHooks []AftermarketDeviceToTemplateHook

var aftermarketDeviceToTemplateBeforeUpdateMu sync.Mutex
var aftermarketDeviceToTemplateBeforeUpdateHooks []AftermarketDeviceToTemplateHook
var aftermarketDeviceToTemplateAfterUpdateMu sync.Mutex
var aftermarketDeviceToTemplateAfterUpdateHooks []AftermarketDeviceToTemplateHook

var aftermarketDeviceToTemplateBeforeDeleteMu sync.Mutex
var aftermarketDeviceToTemplateBeforeDeleteHooks []AftermarketDeviceToTemplateHook
var aftermarketDeviceToTemplateAfterDeleteMu sync.Mutex
var aftermarketDeviceToTemplateAfterDeleteHooks []AftermarketDeviceToTemplateHook

var aftermarketDeviceToTemplateBeforeUpsertMu sync.Mutex
var aftermarketDeviceToTemplateBeforeUpsertHooks []AftermarketDeviceToTemplateHook
var aftermarketDeviceToTemplateAfterUpsertMu sync.Mutex
var aftermarketDeviceToTemplateAfterUpsertHooks []AftermarketDeviceToTemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AftermarketDeviceToTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AftermarketDeviceToTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AftermarketDeviceToTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AftermarketDeviceToTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AftermarketDeviceToTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AftermarketDeviceToTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AftermarketDeviceToTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AftermarketDeviceToTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AftermarketDeviceToTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceToTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAftermarketDeviceToTemplateHook registers your hook function for all future operations.
func AddAftermarketDeviceToTemplateHook(hookPoint boil.HookPoint, aftermarketDeviceToTemplateHook AftermarketDeviceToTemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		aftermarketDeviceToTemplateAfterSelectMu.Lock()
		aftermarketDeviceToTemplateAfterSelectHooks = append(aftermarketDeviceToTemplateAfterSelectHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		aftermarketDeviceToTemplateBeforeInsertMu.Lock()
		aftermarketDeviceToTemplateBeforeInsertHooks = append(aftermarketDeviceToTemplateBeforeInsertHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		aftermarketDeviceToTemplateAfterInsertMu.Lock()
		aftermarketDeviceToTemplateAfterInsertHooks = append(aftermarketDeviceToTemplateAfterInsertHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		aftermarketDeviceToTemplateBeforeUpdateMu.Lock()
		aftermarketDeviceToTemplateBeforeUpdateHooks = append(aftermarketDeviceToTemplateBeforeUpdateHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		aftermarketDeviceToTemplateAfterUpdateMu.Lock()
		aftermarketDeviceToTemplateAfterUpdateHooks = append(aftermarketDeviceToTemplateAfterUpdateHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		aftermarketDeviceToTemplateBeforeDeleteMu.Lock()
		aftermarketDeviceToTemplateBeforeDeleteHooks = append(aftermarketDeviceToTemplateBeforeDeleteHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		aftermarketDeviceToTemplateAfterDeleteMu.Lock()
		aftermarketDeviceToTemplateAfterDeleteHooks = append(aftermarketDeviceToTemplateAfterDeleteHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		aftermarketDeviceToTemplateBeforeUpsertMu.Lock()
		aftermarketDeviceToTemplateBeforeUpsertHooks = append(aftermarketDeviceToTemplateBeforeUpsertHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		aftermarketDeviceToTemplateAfterUpsertMu.Lock()
		aftermarketDeviceToTemplateAfterUpsertHooks = append(aftermarketDeviceToTemplateAfterUpsertHooks, aftermarketDeviceToTemplateHook)
		aftermarketDeviceToTemplateAfterUpsertMu.Unlock()
	}
}

// One returns a single aftermarketDeviceToTemplate record from the query.
func (q aftermarketDeviceToTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AftermarketDeviceToTemplate, error) {
	o := &AftermarketDeviceToTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for aftermarket_device_to_template")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AftermarketDeviceToTemplate records from the query.
func (q aftermarketDeviceToTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (AftermarketDeviceToTemplateSlice, error) {
	var o []*AftermarketDeviceToTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AftermarketDeviceToTemplate slice")
	}

	if len(aftermarketDeviceToTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AftermarketDeviceToTemplate records in the query.
func (q aftermarketDeviceToTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count aftermarket_device_to_template rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aftermarketDeviceToTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if aftermarket_device_to_template exists")
	}

	return count > 0, nil
}

// TemplateNameTemplate pointed to by the foreign key.
func (o *AftermarketDeviceToTemplate) TemplateNameTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateName),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// LoadTemplateNameTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aftermarketDeviceToTemplateL) LoadTemplateNameTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDeviceToTemplate interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDeviceToTemplate
	var object *AftermarketDeviceToTemplate

	if singular {
		var ok bool
		object, ok = maybeAftermarketDeviceToTemplate.(*AftermarketDeviceToTemplate)
		if !ok {
			object = new(AftermarketDeviceToTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDeviceToTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDeviceToTemplate))
			}
		}
	} else {
		s, ok := maybeAftermarketDeviceToTemplate.(*[]*AftermarketDeviceToTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDeviceToTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDeviceToTemplate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceToTemplateR{}
		}
		args[object.TemplateName] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceToTemplateR{}
			}

			args[obj.TemplateName] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(templateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateNameTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateNameAftermarketDeviceToTemplates = append(foreign.R.TemplateNameAftermarketDeviceToTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateName == foreign.TemplateName {
				local.R.TemplateNameTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateNameAftermarketDeviceToTemplates = append(foreign.R.TemplateNameAftermarketDeviceToTemplates, local)
				break
			}
		}
	}

	return nil
}

// SetTemplateNameTemplate of the aftermarketDeviceToTemplate to the related item.
// Sets o.R.TemplateNameTemplate to related.
// Adds o to related.R.TemplateNameAftermarketDeviceToTemplates.
func (o *AftermarketDeviceToTemplate) SetTemplateNameTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_name"}),
		strmangle.WhereClause("\"", "\"", 2, aftermarketDeviceToTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.AftermarketDeviceEthereumAddress, o.TemplateName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateName = related.TemplateName
	if o.R == nil {
		o.R = &aftermarketDeviceToTemplateR{
			TemplateNameTemplate: related,
		}
	} else {
		o.R.TemplateNameTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateNameAftermarketDeviceToTemplates: AftermarketDeviceToTemplateSlice{o},
		}
	} else {
		related.R.TemplateNameAftermarketDeviceToTemplates = append(related.R.TemplateNameAftermarketDeviceToTemplates, o)
	}

	return nil
}

// AftermarketDeviceToTemplates retrieves all the records using an executor.
func AftermarketDeviceToTemplates(mods ...qm.QueryMod) aftermarketDeviceToTemplateQuery {
	mods = append(mods, qm.From("\"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\".*"})
	}

	return aftermarketDeviceToTemplateQuery{q}
}

// FindAftermarketDeviceToTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAftermarketDeviceToTemplate(ctx context.Context, exec boil.ContextExecutor, aftermarketDeviceEthereumAddress []byte, templateName string, selectCols ...string) (*AftermarketDeviceToTemplate, error) {
	aftermarketDeviceToTemplateObj := &AftermarketDeviceToTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" where \"aftermarket_device_ethereum_address\"=$1 AND \"template_name\"=$2", sel,
	)

	q := queries.Raw(query, aftermarketDeviceEthereumAddress, templateName)

	err := q.Bind(ctx, exec, aftermarketDeviceToTemplateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from aftermarket_device_to_template")
	}

	if err = aftermarketDeviceToTemplateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aftermarketDeviceToTemplateObj, err
	}

	return aftermarketDeviceToTemplateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AftermarketDeviceToTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no aftermarket_device_to_template provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aftermarketDeviceToTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aftermarketDeviceToTemplateInsertCacheMut.RLock()
	cache, cached := aftermarketDeviceToTemplateInsertCache[key]
	aftermarketDeviceToTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aftermarketDeviceToTemplateAllColumns,
			aftermarketDeviceToTemplateColumnsWithDefault,
			aftermarketDeviceToTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceToTemplateType, aftermarketDeviceToTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aftermarketDeviceToTemplateType, aftermarketDeviceToTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into aftermarket_device_to_template")
	}

	if !cached {
		aftermarketDeviceToTemplateInsertCacheMut.Lock()
		aftermarketDeviceToTemplateInsertCache[key] = cache
		aftermarketDeviceToTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AftermarketDeviceToTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AftermarketDeviceToTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aftermarketDeviceToTemplateUpdateCacheMut.RLock()
	cache, cached := aftermarketDeviceToTemplateUpdateCache[key]
	aftermarketDeviceToTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aftermarketDeviceToTemplateAllColumns,
			aftermarketDeviceToTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update aftermarket_device_to_template, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, aftermarketDeviceToTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceToTemplateType, aftermarketDeviceToTemplateMapping, append(wl, aftermarketDeviceToTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update aftermarket_device_to_template row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for aftermarket_device_to_template")
	}

	if !cached {
		aftermarketDeviceToTemplateUpdateCacheMut.Lock()
		aftermarketDeviceToTemplateUpdateCache[key] = cache
		aftermarketDeviceToTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aftermarketDeviceToTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for aftermarket_device_to_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for aftermarket_device_to_template")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AftermarketDeviceToTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDeviceToTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aftermarketDeviceToTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aftermarketDeviceToTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aftermarketDeviceToTemplate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AftermarketDeviceToTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no aftermarket_device_to_template provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aftermarketDeviceToTemplateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aftermarketDeviceToTemplateUpsertCacheMut.RLock()
	cache, cached := aftermarketDeviceToTemplateUpsertCache[key]
	aftermarketDeviceToTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			aftermarketDeviceToTemplateAllColumns,
			aftermarketDeviceToTemplateColumnsWithDefault,
			aftermarketDeviceToTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			aftermarketDeviceToTemplateAllColumns,
			aftermarketDeviceToTemplatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert aftermarket_device_to_template, could not build update column list")
		}

		ret := strmangle.SetComplement(aftermarketDeviceToTemplateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(aftermarketDeviceToTemplatePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert aftermarket_device_to_template, could not build conflict column list")
			}

			conflict = make([]string, len(aftermarketDeviceToTemplatePrimaryKeyColumns))
			copy(conflict, aftermarketDeviceToTemplatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceToTemplateType, aftermarketDeviceToTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aftermarketDeviceToTemplateType, aftermarketDeviceToTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert aftermarket_device_to_template")
	}

	if !cached {
		aftermarketDeviceToTemplateUpsertCacheMut.Lock()
		aftermarketDeviceToTemplateUpsertCache[key] = cache
		aftermarketDeviceToTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AftermarketDeviceToTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AftermarketDeviceToTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AftermarketDeviceToTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aftermarketDeviceToTemplatePrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" WHERE \"aftermarket_device_ethereum_address\"=$1 AND \"template_name\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from aftermarket_device_to_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for aftermarket_device_to_template")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aftermarketDeviceToTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aftermarketDeviceToTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aftermarket_device_to_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aftermarket_device_to_template")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AftermarketDeviceToTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aftermarketDeviceToTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDeviceToTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aftermarketDeviceToTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aftermarketDeviceToTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aftermarket_device_to_template")
	}

	if len(aftermarketDeviceToTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AftermarketDeviceToTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAftermarketDeviceToTemplate(ctx, exec, o.AftermarketDeviceEthereumAddress, o.TemplateName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AftermarketDeviceToTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AftermarketDeviceToTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDeviceToTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\".* FROM \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aftermarketDeviceToTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AftermarketDeviceToTemplateSlice")
	}

	*o = slice

	return nil
}

// AftermarketDeviceToTemplateExists checks if the AftermarketDeviceToTemplate row exists.
func AftermarketDeviceToTemplateExists(ctx context.Context, exec boil.ContextExecutor, aftermarketDeviceEthereumAddress []byte, templateName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_signal_decoding_api\".\"aftermarket_device_to_template\" where \"aftermarket_device_ethereum_address\"=$1 AND \"template_name\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, aftermarketDeviceEthereumAddress, templateName)
	}
	row := exec.QueryRowContext(ctx, sql, aftermarketDeviceEthereumAddress, templateName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if aftermarket_device_to_template exists")
	}

	return exists, nil
}

// Exists checks if the AftermarketDeviceToTemplate row exists.
func (o *AftermarketDeviceToTemplate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AftermarketDeviceToTemplateExists(ctx, exec, o.AftermarketDeviceEthereumAddress, o.TemplateName)
}
