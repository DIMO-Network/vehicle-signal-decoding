// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeviceTemplateStatus is an object representing the database table.
type DeviceTemplateStatus struct {
	DeviceEthAddr       []byte    `boil:"device_eth_addr" json:"device_eth_addr" toml:"device_eth_addr" yaml:"device_eth_addr"`
	TemplateDBCURL      string    `boil:"template_dbc_url" json:"template_dbc_url" toml:"template_dbc_url" yaml:"template_dbc_url"`
	TemplatePidURL      string    `boil:"template_pid_url" json:"template_pid_url" toml:"template_pid_url" yaml:"template_pid_url"`
	TemplateSettingsURL string    `boil:"template_settings_url" json:"template_settings_url" toml:"template_settings_url" yaml:"template_settings_url"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *deviceTemplateStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceTemplateStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceTemplateStatusColumns = struct {
	DeviceEthAddr       string
	TemplateDBCURL      string
	TemplatePidURL      string
	TemplateSettingsURL string
	CreatedAt           string
	UpdatedAt           string
}{
	DeviceEthAddr:       "device_eth_addr",
	TemplateDBCURL:      "template_dbc_url",
	TemplatePidURL:      "template_pid_url",
	TemplateSettingsURL: "template_settings_url",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

var DeviceTemplateStatusTableColumns = struct {
	DeviceEthAddr       string
	TemplateDBCURL      string
	TemplatePidURL      string
	TemplateSettingsURL string
	CreatedAt           string
	UpdatedAt           string
}{
	DeviceEthAddr:       "device_template_status.device_eth_addr",
	TemplateDBCURL:      "device_template_status.template_dbc_url",
	TemplatePidURL:      "device_template_status.template_pid_url",
	TemplateSettingsURL: "device_template_status.template_settings_url",
	CreatedAt:           "device_template_status.created_at",
	UpdatedAt:           "device_template_status.updated_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DeviceTemplateStatusWhere = struct {
	DeviceEthAddr       whereHelper__byte
	TemplateDBCURL      whereHelperstring
	TemplatePidURL      whereHelperstring
	TemplateSettingsURL whereHelperstring
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	DeviceEthAddr:       whereHelper__byte{field: "\"vehicle_signal_decoding_api\".\"device_template_status\".\"device_eth_addr\""},
	TemplateDBCURL:      whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template_status\".\"template_dbc_url\""},
	TemplatePidURL:      whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template_status\".\"template_pid_url\""},
	TemplateSettingsURL: whereHelperstring{field: "\"vehicle_signal_decoding_api\".\"device_template_status\".\"template_settings_url\""},
	CreatedAt:           whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"device_template_status\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"vehicle_signal_decoding_api\".\"device_template_status\".\"updated_at\""},
}

// DeviceTemplateStatusRels is where relationship names are stored.
var DeviceTemplateStatusRels = struct {
	TemplateDBCURLTemplate      string
	TemplatePidURLTemplate      string
	TemplateSettingsURLTemplate string
}{
	TemplateDBCURLTemplate:      "TemplateDBCURLTemplate",
	TemplatePidURLTemplate:      "TemplatePidURLTemplate",
	TemplateSettingsURLTemplate: "TemplateSettingsURLTemplate",
}

// deviceTemplateStatusR is where relationships are stored.
type deviceTemplateStatusR struct {
	TemplateDBCURLTemplate      *Template `boil:"TemplateDBCURLTemplate" json:"TemplateDBCURLTemplate" toml:"TemplateDBCURLTemplate" yaml:"TemplateDBCURLTemplate"`
	TemplatePidURLTemplate      *Template `boil:"TemplatePidURLTemplate" json:"TemplatePidURLTemplate" toml:"TemplatePidURLTemplate" yaml:"TemplatePidURLTemplate"`
	TemplateSettingsURLTemplate *Template `boil:"TemplateSettingsURLTemplate" json:"TemplateSettingsURLTemplate" toml:"TemplateSettingsURLTemplate" yaml:"TemplateSettingsURLTemplate"`
}

// NewStruct creates a new relationship struct
func (*deviceTemplateStatusR) NewStruct() *deviceTemplateStatusR {
	return &deviceTemplateStatusR{}
}

func (r *deviceTemplateStatusR) GetTemplateDBCURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateDBCURLTemplate
}

func (r *deviceTemplateStatusR) GetTemplatePidURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplatePidURLTemplate
}

func (r *deviceTemplateStatusR) GetTemplateSettingsURLTemplate() *Template {
	if r == nil {
		return nil
	}
	return r.TemplateSettingsURLTemplate
}

// deviceTemplateStatusL is where Load methods for each relationship are stored.
type deviceTemplateStatusL struct{}

var (
	deviceTemplateStatusAllColumns            = []string{"device_eth_addr", "template_dbc_url", "template_pid_url", "template_settings_url", "created_at", "updated_at"}
	deviceTemplateStatusColumnsWithoutDefault = []string{"device_eth_addr", "template_dbc_url", "template_pid_url", "template_settings_url"}
	deviceTemplateStatusColumnsWithDefault    = []string{"created_at", "updated_at"}
	deviceTemplateStatusPrimaryKeyColumns     = []string{"device_eth_addr"}
	deviceTemplateStatusGeneratedColumns      = []string{}
)

type (
	// DeviceTemplateStatusSlice is an alias for a slice of pointers to DeviceTemplateStatus.
	// This should almost always be used instead of []DeviceTemplateStatus.
	DeviceTemplateStatusSlice []*DeviceTemplateStatus
	// DeviceTemplateStatusHook is the signature for custom DeviceTemplateStatus hook methods
	DeviceTemplateStatusHook func(context.Context, boil.ContextExecutor, *DeviceTemplateStatus) error

	deviceTemplateStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceTemplateStatusType                 = reflect.TypeOf(&DeviceTemplateStatus{})
	deviceTemplateStatusMapping              = queries.MakeStructMapping(deviceTemplateStatusType)
	deviceTemplateStatusPrimaryKeyMapping, _ = queries.BindMapping(deviceTemplateStatusType, deviceTemplateStatusMapping, deviceTemplateStatusPrimaryKeyColumns)
	deviceTemplateStatusInsertCacheMut       sync.RWMutex
	deviceTemplateStatusInsertCache          = make(map[string]insertCache)
	deviceTemplateStatusUpdateCacheMut       sync.RWMutex
	deviceTemplateStatusUpdateCache          = make(map[string]updateCache)
	deviceTemplateStatusUpsertCacheMut       sync.RWMutex
	deviceTemplateStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceTemplateStatusAfterSelectHooks []DeviceTemplateStatusHook

var deviceTemplateStatusBeforeInsertHooks []DeviceTemplateStatusHook
var deviceTemplateStatusAfterInsertHooks []DeviceTemplateStatusHook

var deviceTemplateStatusBeforeUpdateHooks []DeviceTemplateStatusHook
var deviceTemplateStatusAfterUpdateHooks []DeviceTemplateStatusHook

var deviceTemplateStatusBeforeDeleteHooks []DeviceTemplateStatusHook
var deviceTemplateStatusAfterDeleteHooks []DeviceTemplateStatusHook

var deviceTemplateStatusBeforeUpsertHooks []DeviceTemplateStatusHook
var deviceTemplateStatusAfterUpsertHooks []DeviceTemplateStatusHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceTemplateStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceTemplateStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceTemplateStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceTemplateStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceTemplateStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceTemplateStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceTemplateStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceTemplateStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceTemplateStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTemplateStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceTemplateStatusHook registers your hook function for all future operations.
func AddDeviceTemplateStatusHook(hookPoint boil.HookPoint, deviceTemplateStatusHook DeviceTemplateStatusHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceTemplateStatusAfterSelectHooks = append(deviceTemplateStatusAfterSelectHooks, deviceTemplateStatusHook)
	case boil.BeforeInsertHook:
		deviceTemplateStatusBeforeInsertHooks = append(deviceTemplateStatusBeforeInsertHooks, deviceTemplateStatusHook)
	case boil.AfterInsertHook:
		deviceTemplateStatusAfterInsertHooks = append(deviceTemplateStatusAfterInsertHooks, deviceTemplateStatusHook)
	case boil.BeforeUpdateHook:
		deviceTemplateStatusBeforeUpdateHooks = append(deviceTemplateStatusBeforeUpdateHooks, deviceTemplateStatusHook)
	case boil.AfterUpdateHook:
		deviceTemplateStatusAfterUpdateHooks = append(deviceTemplateStatusAfterUpdateHooks, deviceTemplateStatusHook)
	case boil.BeforeDeleteHook:
		deviceTemplateStatusBeforeDeleteHooks = append(deviceTemplateStatusBeforeDeleteHooks, deviceTemplateStatusHook)
	case boil.AfterDeleteHook:
		deviceTemplateStatusAfterDeleteHooks = append(deviceTemplateStatusAfterDeleteHooks, deviceTemplateStatusHook)
	case boil.BeforeUpsertHook:
		deviceTemplateStatusBeforeUpsertHooks = append(deviceTemplateStatusBeforeUpsertHooks, deviceTemplateStatusHook)
	case boil.AfterUpsertHook:
		deviceTemplateStatusAfterUpsertHooks = append(deviceTemplateStatusAfterUpsertHooks, deviceTemplateStatusHook)
	}
}

// One returns a single deviceTemplateStatus record from the query.
func (q deviceTemplateStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceTemplateStatus, error) {
	o := &DeviceTemplateStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_template_status")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceTemplateStatus records from the query.
func (q deviceTemplateStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceTemplateStatusSlice, error) {
	var o []*DeviceTemplateStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceTemplateStatus slice")
	}

	if len(deviceTemplateStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceTemplateStatus records in the query.
func (q deviceTemplateStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_template_status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceTemplateStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_template_status exists")
	}

	return count > 0, nil
}

// TemplateDBCURLTemplate pointed to by the foreign key.
func (o *DeviceTemplateStatus) TemplateDBCURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateDBCURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// TemplatePidURLTemplate pointed to by the foreign key.
func (o *DeviceTemplateStatus) TemplatePidURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplatePidURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// TemplateSettingsURLTemplate pointed to by the foreign key.
func (o *DeviceTemplateStatus) TemplateSettingsURLTemplate(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"template_name\" = ?", o.TemplateSettingsURL),
	}

	queryMods = append(queryMods, mods...)

	return Templates(queryMods...)
}

// LoadTemplateDBCURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceTemplateStatusL) LoadTemplateDBCURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceTemplateStatus interface{}, mods queries.Applicator) error {
	var slice []*DeviceTemplateStatus
	var object *DeviceTemplateStatus

	if singular {
		var ok bool
		object, ok = maybeDeviceTemplateStatus.(*DeviceTemplateStatus)
		if !ok {
			object = new(DeviceTemplateStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceTemplateStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceTemplateStatus))
			}
		}
	} else {
		s, ok := maybeDeviceTemplateStatus.(*[]*DeviceTemplateStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceTemplateStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceTemplateStatus))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceTemplateStatusR{}
		}
		args = append(args, object.TemplateDBCURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceTemplateStatusR{}
			}

			for _, a := range args {
				if a == obj.TemplateDBCURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplateDBCURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(templateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateDBCURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateDBCURLDeviceTemplateStatuses = append(foreign.R.TemplateDBCURLDeviceTemplateStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateDBCURL == foreign.TemplateName {
				local.R.TemplateDBCURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateDBCURLDeviceTemplateStatuses = append(foreign.R.TemplateDBCURLDeviceTemplateStatuses, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplatePidURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceTemplateStatusL) LoadTemplatePidURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceTemplateStatus interface{}, mods queries.Applicator) error {
	var slice []*DeviceTemplateStatus
	var object *DeviceTemplateStatus

	if singular {
		var ok bool
		object, ok = maybeDeviceTemplateStatus.(*DeviceTemplateStatus)
		if !ok {
			object = new(DeviceTemplateStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceTemplateStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceTemplateStatus))
			}
		}
	} else {
		s, ok := maybeDeviceTemplateStatus.(*[]*DeviceTemplateStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceTemplateStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceTemplateStatus))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceTemplateStatusR{}
		}
		args = append(args, object.TemplatePidURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceTemplateStatusR{}
			}

			for _, a := range args {
				if a == obj.TemplatePidURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplatePidURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(templateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplatePidURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplatePidURLDeviceTemplateStatuses = append(foreign.R.TemplatePidURLDeviceTemplateStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplatePidURL == foreign.TemplateName {
				local.R.TemplatePidURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplatePidURLDeviceTemplateStatuses = append(foreign.R.TemplatePidURLDeviceTemplateStatuses, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplateSettingsURLTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceTemplateStatusL) LoadTemplateSettingsURLTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceTemplateStatus interface{}, mods queries.Applicator) error {
	var slice []*DeviceTemplateStatus
	var object *DeviceTemplateStatus

	if singular {
		var ok bool
		object, ok = maybeDeviceTemplateStatus.(*DeviceTemplateStatus)
		if !ok {
			object = new(DeviceTemplateStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceTemplateStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceTemplateStatus))
			}
		}
	} else {
		s, ok := maybeDeviceTemplateStatus.(*[]*DeviceTemplateStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceTemplateStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceTemplateStatus))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceTemplateStatusR{}
		}
		args = append(args, object.TemplateSettingsURL)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceTemplateStatusR{}
			}

			for _, a := range args {
				if a == obj.TemplateSettingsURL {
					continue Outer
				}
			}

			args = append(args, obj.TemplateSettingsURL)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_signal_decoding_api.templates`),
		qm.WhereIn(`vehicle_signal_decoding_api.templates.template_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(templateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TemplateSettingsURLTemplate = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.TemplateSettingsURLDeviceTemplateStatuses = append(foreign.R.TemplateSettingsURLDeviceTemplateStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateSettingsURL == foreign.TemplateName {
				local.R.TemplateSettingsURLTemplate = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateSettingsURLDeviceTemplateStatuses = append(foreign.R.TemplateSettingsURLDeviceTemplateStatuses, local)
				break
			}
		}
	}

	return nil
}

// SetTemplateDBCURLTemplate of the deviceTemplateStatus to the related item.
// Sets o.R.TemplateDBCURLTemplate to related.
// Adds o to related.R.TemplateDBCURLDeviceTemplateStatuses.
func (o *DeviceTemplateStatus) SetTemplateDBCURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"device_template_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_dbc_url"}),
		strmangle.WhereClause("\"", "\"", 2, deviceTemplateStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.DeviceEthAddr}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateDBCURL = related.TemplateName
	if o.R == nil {
		o.R = &deviceTemplateStatusR{
			TemplateDBCURLTemplate: related,
		}
	} else {
		o.R.TemplateDBCURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateDBCURLDeviceTemplateStatuses: DeviceTemplateStatusSlice{o},
		}
	} else {
		related.R.TemplateDBCURLDeviceTemplateStatuses = append(related.R.TemplateDBCURLDeviceTemplateStatuses, o)
	}

	return nil
}

// SetTemplatePidURLTemplate of the deviceTemplateStatus to the related item.
// Sets o.R.TemplatePidURLTemplate to related.
// Adds o to related.R.TemplatePidURLDeviceTemplateStatuses.
func (o *DeviceTemplateStatus) SetTemplatePidURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"device_template_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_pid_url"}),
		strmangle.WhereClause("\"", "\"", 2, deviceTemplateStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.DeviceEthAddr}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplatePidURL = related.TemplateName
	if o.R == nil {
		o.R = &deviceTemplateStatusR{
			TemplatePidURLTemplate: related,
		}
	} else {
		o.R.TemplatePidURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplatePidURLDeviceTemplateStatuses: DeviceTemplateStatusSlice{o},
		}
	} else {
		related.R.TemplatePidURLDeviceTemplateStatuses = append(related.R.TemplatePidURLDeviceTemplateStatuses, o)
	}

	return nil
}

// SetTemplateSettingsURLTemplate of the deviceTemplateStatus to the related item.
// Sets o.R.TemplateSettingsURLTemplate to related.
// Adds o to related.R.TemplateSettingsURLDeviceTemplateStatuses.
func (o *DeviceTemplateStatus) SetTemplateSettingsURLTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_signal_decoding_api\".\"device_template_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_settings_url"}),
		strmangle.WhereClause("\"", "\"", 2, deviceTemplateStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateName, o.DeviceEthAddr}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateSettingsURL = related.TemplateName
	if o.R == nil {
		o.R = &deviceTemplateStatusR{
			TemplateSettingsURLTemplate: related,
		}
	} else {
		o.R.TemplateSettingsURLTemplate = related
	}

	if related.R == nil {
		related.R = &templateR{
			TemplateSettingsURLDeviceTemplateStatuses: DeviceTemplateStatusSlice{o},
		}
	} else {
		related.R.TemplateSettingsURLDeviceTemplateStatuses = append(related.R.TemplateSettingsURLDeviceTemplateStatuses, o)
	}

	return nil
}

// DeviceTemplateStatuses retrieves all the records using an executor.
func DeviceTemplateStatuses(mods ...qm.QueryMod) deviceTemplateStatusQuery {
	mods = append(mods, qm.From("\"vehicle_signal_decoding_api\".\"device_template_status\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_signal_decoding_api\".\"device_template_status\".*"})
	}

	return deviceTemplateStatusQuery{q}
}

// FindDeviceTemplateStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceTemplateStatus(ctx context.Context, exec boil.ContextExecutor, deviceEthAddr []byte, selectCols ...string) (*DeviceTemplateStatus, error) {
	deviceTemplateStatusObj := &DeviceTemplateStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_signal_decoding_api\".\"device_template_status\" where \"device_eth_addr\"=$1", sel,
	)

	q := queries.Raw(query, deviceEthAddr)

	err := q.Bind(ctx, exec, deviceTemplateStatusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_template_status")
	}

	if err = deviceTemplateStatusObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceTemplateStatusObj, err
	}

	return deviceTemplateStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceTemplateStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_template_status provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceTemplateStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceTemplateStatusInsertCacheMut.RLock()
	cache, cached := deviceTemplateStatusInsertCache[key]
	deviceTemplateStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceTemplateStatusAllColumns,
			deviceTemplateStatusColumnsWithDefault,
			deviceTemplateStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceTemplateStatusType, deviceTemplateStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceTemplateStatusType, deviceTemplateStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_signal_decoding_api\".\"device_template_status\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_signal_decoding_api\".\"device_template_status\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_template_status")
	}

	if !cached {
		deviceTemplateStatusInsertCacheMut.Lock()
		deviceTemplateStatusInsertCache[key] = cache
		deviceTemplateStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceTemplateStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceTemplateStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceTemplateStatusUpdateCacheMut.RLock()
	cache, cached := deviceTemplateStatusUpdateCache[key]
	deviceTemplateStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceTemplateStatusAllColumns,
			deviceTemplateStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_template_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"device_template_status\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deviceTemplateStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceTemplateStatusType, deviceTemplateStatusMapping, append(wl, deviceTemplateStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_template_status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_template_status")
	}

	if !cached {
		deviceTemplateStatusUpdateCacheMut.Lock()
		deviceTemplateStatusUpdateCache[key] = cache
		deviceTemplateStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceTemplateStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_template_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_template_status")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceTemplateStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTemplateStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_signal_decoding_api\".\"device_template_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deviceTemplateStatusPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceTemplateStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceTemplateStatus")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceTemplateStatus) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_template_status provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceTemplateStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceTemplateStatusUpsertCacheMut.RLock()
	cache, cached := deviceTemplateStatusUpsertCache[key]
	deviceTemplateStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceTemplateStatusAllColumns,
			deviceTemplateStatusColumnsWithDefault,
			deviceTemplateStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceTemplateStatusAllColumns,
			deviceTemplateStatusPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert device_template_status, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deviceTemplateStatusPrimaryKeyColumns))
			copy(conflict, deviceTemplateStatusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_signal_decoding_api\".\"device_template_status\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deviceTemplateStatusType, deviceTemplateStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceTemplateStatusType, deviceTemplateStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert device_template_status")
	}

	if !cached {
		deviceTemplateStatusUpsertCacheMut.Lock()
		deviceTemplateStatusUpsertCache[key] = cache
		deviceTemplateStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceTemplateStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceTemplateStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceTemplateStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceTemplateStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"device_template_status\" WHERE \"device_eth_addr\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_template_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_template_status")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceTemplateStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceTemplateStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_template_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_template_status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceTemplateStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceTemplateStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTemplateStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_signal_decoding_api\".\"device_template_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceTemplateStatusPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceTemplateStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_template_status")
	}

	if len(deviceTemplateStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceTemplateStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceTemplateStatus(ctx, exec, o.DeviceEthAddr)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceTemplateStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceTemplateStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTemplateStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_signal_decoding_api\".\"device_template_status\".* FROM \"vehicle_signal_decoding_api\".\"device_template_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceTemplateStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceTemplateStatusSlice")
	}

	*o = slice

	return nil
}

// DeviceTemplateStatusExists checks if the DeviceTemplateStatus row exists.
func DeviceTemplateStatusExists(ctx context.Context, exec boil.ContextExecutor, deviceEthAddr []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_signal_decoding_api\".\"device_template_status\" where \"device_eth_addr\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deviceEthAddr)
	}
	row := exec.QueryRowContext(ctx, sql, deviceEthAddr)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_template_status exists")
	}

	return exists, nil
}

// Exists checks if the DeviceTemplateStatus row exists.
func (o *DeviceTemplateStatus) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeviceTemplateStatusExists(ctx, exec, o.DeviceEthAddr)
}
