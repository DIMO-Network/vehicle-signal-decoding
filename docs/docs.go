// Package docs Code generated by swaggo/swag at 2024-11-05 12:00:54.324303 -0500 EST m=+1.505182834. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/device-config/dbc/{templateName}": {
            "get": {
                "description": "Fetches the DBC file from the dbc_files table given a template name. Will get all the parent dbc files as well and meld them together",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "template name",
                        "name": "templateName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved DBC file",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No DBC file found for the given template name."
                    }
                }
            }
        },
        "/device-config/eth-addr/{ethAddr}/hw/status": {
            "patch": {
                "security": [
                    {
                        "SignatureAuth": []
                    }
                ],
                "description": "Set what template and/or firmware was applied. None of the properties are required. Will not be set if not passed in. Endpoint is meant only for hardware devices self-reporting their template update.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum Address",
                        "name": "ethAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "set any properties that were updated on the device",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DeviceTemplateStatusPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated"
                    },
                    "500": {
                        "description": "unable to parse request or storage failure"
                    }
                }
            }
        },
        "/device-config/eth-addr/{ethAddr}/jobs": {
            "get": {
                "description": "Retrieve the jobs based on device's Ethereum Address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicle-signal-decoding"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum Address",
                        "name": "ethAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved jobs",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.JobResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect eth addr format"
                    }
                }
            }
        },
        "/device-config/eth-addr/{ethAddr}/jobs/pending": {
            "get": {
                "description": "Retrieve the jobs based on device's Ethereum Address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicle-signal-decoding"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum Address",
                        "name": "ethAddr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved jobs",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.JobResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect eth addr format"
                    }
                }
            }
        },
        "/device-config/eth-addr/{ethAddr}/jobs/{jobId}/{status}": {
            "patch": {
                "description": "Path job status based on device's Ethereum Address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicle-signal-decoding"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum Address",
                        "name": "ethAddr",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "jobId",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Status to set",
                        "name": "status",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "incorrect eth addr format"
                    },
                    "404": {
                        "description": "Not Found - No job found with id"
                    }
                }
            }
        },
        "/device-config/eth-addr/{ethAddr}/status": {
            "get": {
                "description": "Helps client determine if template (pids, dbc, settings) are up to date or not for the device with the given eth addr.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum Address",
                        "name": "ethAddr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved configuration URLs",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DeviceTemplateStatusResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect eth addr format"
                    },
                    "404": {
                        "description": "Not Found - we haven't seen this device yet, assume template not up to date"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set what template and/or firmware was applied. None of the properties are required. Will not be set if not passed in.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum Address",
                        "name": "ethAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "set any properties that were updated on the device",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DeviceTemplateStatusPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated"
                    },
                    "500": {
                        "description": "unable to parse request or storage failure"
                    }
                }
            }
        },
        "/device-config/eth-addr/{ethAddr}/urls": {
            "get": {
                "description": "Retrieve the URLs for PID, DeviceSettings, and DBC configuration based on device's Ethereum Address. These could be empty if not configs available",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum Address",
                        "name": "ethAddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CAN Protocol, '6' or '7'",
                        "name": "protocol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved configuration URLs",
                        "schema": {
                            "$ref": "#/definitions/device.ConfigResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect eth addr format"
                    },
                    "404": {
                        "description": "Not Found - No templates available for the given parameters"
                    }
                }
            }
        },
        "/device-config/pids/{templateName}": {
            "get": {
                "description": "Retrieves a list of PID configurations from the database given a template name",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "template name",
                        "name": "templateName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved PID Configurations",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_vehicle-signal-decoding_pkg_grpc.PIDRequests"
                        }
                    },
                    "404": {
                        "description": "No PID Config data found for the given template name."
                    }
                }
            }
        },
        "/device-config/settings/{name}": {
            "get": {
                "description": "Fetches the device settings configurations from device_settings table given a name. Note that device settings mostly only vary by powertrain and\nmay or may not be attached to a specific template. To return protobuf: \"application/x-protobuf\"\nNote that the templateName returned here is actually the device setting name",
                "produces": [
                    "application/json",
                    "application/x-protobuf"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Device Settings",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_vehicle-signal-decoding_pkg_grpc.DeviceSetting"
                        }
                    },
                    "404": {
                        "description": "No Device Settings data found for the given name."
                    }
                }
            }
        },
        "/device-config/vin/{vin}/urls": {
            "get": {
                "description": "Retrieve the URLs for PID, DeviceSettings, and DBC configuration based on a given VIN. These could be empty if not configs available",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-config"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "vehicle identification number (VIN)",
                        "name": "vin",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CAN Protocol, '6' or '7', 8,9,66,77,88,99",
                        "name": "protocol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved configuration URLs",
                        "schema": {
                            "$ref": "#/definitions/device.ConfigResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - No templates available for the given parameters"
                    }
                }
            }
        }
    },
    "definitions": {
        "device.ConfigResponse": {
            "type": "object",
            "properties": {
                "dbcUrl": {
                    "description": "DbcURL including the version for the dbc file, usually same as pidurl template version",
                    "type": "string"
                },
                "deviceSettingUrl": {
                    "description": "DeviceSettingURL including the version for the settings",
                    "type": "string"
                },
                "pidUrl": {
                    "description": "PidURL including the version for the template",
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_vehicle-signal-decoding_pkg_grpc.DeviceSetting": {
            "type": "object",
            "properties": {
                "battery_critical_level_voltage": {
                    "type": "number"
                },
                "location_frequency_secs": {
                    "type": "number"
                },
                "min_voltage_obd_loggers": {
                    "type": "number"
                },
                "safety_cut_out_voltage": {
                    "type": "number"
                },
                "sleep_timer_event_driven_interval_secs": {
                    "type": "number"
                },
                "sleep_timer_event_driven_period_secs": {
                    "type": "number"
                },
                "sleep_timer_inactivity_after_sleep_secs": {
                    "type": "number"
                },
                "sleep_timer_inactivity_fallback_interval_secs": {
                    "type": "number"
                },
                "template_name": {
                    "type": "string"
                },
                "wake_trigger_voltage_level": {
                    "type": "number"
                }
            }
        },
        "github_com_DIMO-Network_vehicle-signal-decoding_pkg_grpc.PIDConfig": {
            "type": "object",
            "properties": {
                "can_flow_control_clear": {
                    "type": "boolean"
                },
                "can_flow_control_id_pair": {
                    "description": "can be used to specify a custom response header. format is hex,hex - second hex is the resp header",
                    "type": "string"
                },
                "formula": {
                    "type": "string"
                },
                "header": {
                    "type": "integer"
                },
                "interval_seconds": {
                    "type": "integer"
                },
                "mode": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "pid": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_vehicle-signal-decoding_pkg_grpc.PIDRequests": {
            "type": "object",
            "properties": {
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_DIMO-Network_vehicle-signal-decoding_pkg_grpc.PIDConfig"
                    }
                },
                "template_name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.DeviceTemplateStatusPatch": {
            "type": "object",
            "properties": {
                "dbcUrl": {
                    "description": "DbcURL including the version for the dbc file, usually same as pidurl template version",
                    "type": "string"
                },
                "deviceSettingUrl": {
                    "description": "DeviceSettingURL including the version for the settings",
                    "type": "string"
                },
                "firmwareVersionApplied": {
                    "description": "FirmwareVersionApplied version of firmware that was confirmed installed on device",
                    "type": "string"
                },
                "pidUrl": {
                    "description": "PidURL including the version for the template",
                    "type": "string"
                },
                "pidsUrl": {
                    "description": "PidsURL exists for backwards compatibility\nDeprecated",
                    "type": "string"
                },
                "settingsUrl": {
                    "description": "SettingsUrl exists for backwards compatibiltiy\nDeprecated",
                    "type": "string"
                }
            }
        },
        "internal_controllers.DeviceTemplateStatusResponse": {
            "type": "object",
            "properties": {
                "firmwareVersion": {
                    "type": "string"
                },
                "isFirmwareUpToDate": {
                    "type": "boolean"
                },
                "isTemplateUpToDate": {
                    "description": "IsTemplateUpToDate based on information we have, based on what was set last by mobile app",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template contains the current urls server has for this device",
                    "allOf": [
                        {
                            "$ref": "#/definitions/device.ConfigResponse"
                        }
                    ]
                }
            }
        },
        "internal_controllers.JobResponse": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Flow to get your device config: start by Getting the URL's to your device's configuration: ` + "`" + `/device-config/eth-addr/:ethAddr/urls` + "`" + ` or by vin, check readme for details.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "SignatureAuth": {
            "type": "apiKey",
            "name": "Signature",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "DIMO Vehicle-Signal-Decoding",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
